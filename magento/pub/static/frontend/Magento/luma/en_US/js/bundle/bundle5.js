require.config({"config": {
        "jsbuild":{"jquery/ui-modules/widgets/dialog.js":"/*!\n * jQuery UI Dialog 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Dialog\n//>>group: Widgets\n//>>description: Displays customizable dialog windows.\n//>>docs: http://api.jqueryui.com/dialog/\n//>>demos: http://jqueryui.com/dialog/\n//>>css.structure: ../../themes/base/core.css\n//>>css.structure: ../../themes/base/dialog.css\n//>>css.theme: ../../themes/base/theme.css\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n            \"./button\",\n            \"./draggable\",\n            \"./mouse\",\n            \"./resizable\",\n            \"../focusable\",\n            \"../keycode\",\n            \"../position\",\n            \"../safe-active-element\",\n            \"../safe-blur\",\n            \"../tabbable\",\n            \"../unique-id\",\n            \"../version\",\n            \"../widget\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    $.widget( \"ui.dialog\", {\n        version: \"1.13.2\",\n        options: {\n            appendTo: \"body\",\n            autoOpen: true,\n            buttons: [],\n            classes: {\n                \"ui-dialog\": \"ui-corner-all\",\n                \"ui-dialog-titlebar\": \"ui-corner-all\"\n            },\n            closeOnEscape: true,\n            closeText: \"Close\",\n            draggable: true,\n            hide: null,\n            height: \"auto\",\n            maxHeight: null,\n            maxWidth: null,\n            minHeight: 150,\n            minWidth: 150,\n            modal: false,\n            position: {\n                my: \"center\",\n                at: \"center\",\n                of: window,\n                collision: \"fit\",\n\n                // Ensure the titlebar is always visible\n                using: function( pos ) {\n                    var topOffset = $( this ).css( pos ).offset().top;\n                    if ( topOffset < 0 ) {\n                        $( this ).css( \"top\", pos.top - topOffset );\n                    }\n                }\n            },\n            resizable: true,\n            show: null,\n            title: null,\n            width: 300,\n\n            // Callbacks\n            beforeClose: null,\n            close: null,\n            drag: null,\n            dragStart: null,\n            dragStop: null,\n            focus: null,\n            open: null,\n            resize: null,\n            resizeStart: null,\n            resizeStop: null\n        },\n\n        sizeRelatedOptions: {\n            buttons: true,\n            height: true,\n            maxHeight: true,\n            maxWidth: true,\n            minHeight: true,\n            minWidth: true,\n            width: true\n        },\n\n        resizableRelatedOptions: {\n            maxHeight: true,\n            maxWidth: true,\n            minHeight: true,\n            minWidth: true\n        },\n\n        _create: function() {\n            this.originalCss = {\n                display: this.element[ 0 ].style.display,\n                width: this.element[ 0 ].style.width,\n                minHeight: this.element[ 0 ].style.minHeight,\n                maxHeight: this.element[ 0 ].style.maxHeight,\n                height: this.element[ 0 ].style.height\n            };\n            this.originalPosition = {\n                parent: this.element.parent(),\n                index: this.element.parent().children().index( this.element )\n            };\n            this.originalTitle = this.element.attr( \"title\" );\n            if ( this.options.title == null && this.originalTitle != null ) {\n                this.options.title = this.originalTitle;\n            }\n\n            // Dialogs can't be disabled\n            if ( this.options.disabled ) {\n                this.options.disabled = false;\n            }\n\n            this._createWrapper();\n\n            this.element\n                .show()\n                .removeAttr( \"title\" )\n                .appendTo( this.uiDialog );\n\n            this._addClass( \"ui-dialog-content\", \"ui-widget-content\" );\n\n            this._createTitlebar();\n            this._createButtonPane();\n\n            if ( this.options.draggable && $.fn.draggable ) {\n                this._makeDraggable();\n            }\n            if ( this.options.resizable && $.fn.resizable ) {\n                this._makeResizable();\n            }\n\n            this._isOpen = false;\n\n            this._trackFocus();\n        },\n\n        _init: function() {\n            if ( this.options.autoOpen ) {\n                this.open();\n            }\n        },\n\n        _appendTo: function() {\n            var element = this.options.appendTo;\n            if ( element && ( element.jquery || element.nodeType ) ) {\n                return $( element );\n            }\n            return this.document.find( element || \"body\" ).eq( 0 );\n        },\n\n        _destroy: function() {\n            var next,\n                originalPosition = this.originalPosition;\n\n            this._untrackInstance();\n            this._destroyOverlay();\n\n            this.element\n                .removeUniqueId()\n                .css( this.originalCss )\n\n                // Without detaching first, the following becomes really slow\n                .detach();\n\n            this.uiDialog.remove();\n\n            if ( this.originalTitle ) {\n                this.element.attr( \"title\", this.originalTitle );\n            }\n\n            next = originalPosition.parent.children().eq( originalPosition.index );\n\n            // Don't try to place the dialog next to itself (#8613)\n            if ( next.length && next[ 0 ] !== this.element[ 0 ] ) {\n                next.before( this.element );\n            } else {\n                originalPosition.parent.append( this.element );\n            }\n        },\n\n        widget: function() {\n            return this.uiDialog;\n        },\n\n        disable: $.noop,\n        enable: $.noop,\n\n        close: function( event ) {\n            var that = this;\n\n            if ( !this._isOpen || this._trigger( \"beforeClose\", event ) === false ) {\n                return;\n            }\n\n            this._isOpen = false;\n            this._focusedElement = null;\n            this._destroyOverlay();\n            this._untrackInstance();\n\n            if ( !this.opener.filter( \":focusable\" ).trigger( \"focus\" ).length ) {\n\n                // Hiding a focused element doesn't trigger blur in WebKit\n                // so in case we have nothing to focus on, explicitly blur the active element\n                // https://bugs.webkit.org/show_bug.cgi?id=47182\n                $.ui.safeBlur( $.ui.safeActiveElement( this.document[ 0 ] ) );\n            }\n\n            this._hide( this.uiDialog, this.options.hide, function() {\n                that._trigger( \"close\", event );\n            } );\n        },\n\n        isOpen: function() {\n            return this._isOpen;\n        },\n\n        moveToTop: function() {\n            this._moveToTop();\n        },\n\n        _moveToTop: function( event, silent ) {\n            var moved = false,\n                zIndices = this.uiDialog.siblings( \".ui-front:visible\" ).map( function() {\n                    return +$( this ).css( \"z-index\" );\n                } ).get(),\n                zIndexMax = Math.max.apply( null, zIndices );\n\n            if ( zIndexMax >= +this.uiDialog.css( \"z-index\" ) ) {\n                this.uiDialog.css( \"z-index\", zIndexMax + 1 );\n                moved = true;\n            }\n\n            if ( moved && !silent ) {\n                this._trigger( \"focus\", event );\n            }\n            return moved;\n        },\n\n        open: function() {\n            var that = this;\n            if ( this._isOpen ) {\n                if ( this._moveToTop() ) {\n                    this._focusTabbable();\n                }\n                return;\n            }\n\n            this._isOpen = true;\n            this.opener = $( $.ui.safeActiveElement( this.document[ 0 ] ) );\n\n            this._size();\n            this._position();\n            this._createOverlay();\n            this._moveToTop( null, true );\n\n            // Ensure the overlay is moved to the top with the dialog, but only when\n            // opening. The overlay shouldn't move after the dialog is open so that\n            // modeless dialogs opened after the modal dialog stack properly.\n            if ( this.overlay ) {\n                this.overlay.css( \"z-index\", this.uiDialog.css( \"z-index\" ) - 1 );\n            }\n\n            this._show( this.uiDialog, this.options.show, function() {\n                that._focusTabbable();\n                that._trigger( \"focus\" );\n            } );\n\n            // Track the dialog immediately upon opening in case a focus event\n            // somehow occurs outside of the dialog before an element inside the\n            // dialog is focused (#10152)\n            this._makeFocusTarget();\n\n            this._trigger( \"open\" );\n        },\n\n        _focusTabbable: function() {\n\n            // Set focus to the first match:\n            // 1. An element that was focused previously\n            // 2. First element inside the dialog matching [autofocus]\n            // 3. Tabbable element inside the content element\n            // 4. Tabbable element inside the buttonpane\n            // 5. The close button\n            // 6. The dialog itself\n            var hasFocus = this._focusedElement;\n            if ( !hasFocus ) {\n                hasFocus = this.element.find( \"[autofocus]\" );\n            }\n            if ( !hasFocus.length ) {\n                hasFocus = this.element.find( \":tabbable\" );\n            }\n            if ( !hasFocus.length ) {\n                hasFocus = this.uiDialogButtonPane.find( \":tabbable\" );\n            }\n            if ( !hasFocus.length ) {\n                hasFocus = this.uiDialogTitlebarClose.filter( \":tabbable\" );\n            }\n            if ( !hasFocus.length ) {\n                hasFocus = this.uiDialog;\n            }\n            hasFocus.eq( 0 ).trigger( \"focus\" );\n        },\n\n        _restoreTabbableFocus: function() {\n            var activeElement = $.ui.safeActiveElement( this.document[ 0 ] ),\n                isActive = this.uiDialog[ 0 ] === activeElement ||\n                    $.contains( this.uiDialog[ 0 ], activeElement );\n            if ( !isActive ) {\n                this._focusTabbable();\n            }\n        },\n\n        _keepFocus: function( event ) {\n            event.preventDefault();\n            this._restoreTabbableFocus();\n\n            // support: IE\n            // IE <= 8 doesn't prevent moving focus even with event.preventDefault()\n            // so we check again later\n            this._delay( this._restoreTabbableFocus );\n        },\n\n        _createWrapper: function() {\n            this.uiDialog = $( \"<div>\" )\n                .hide()\n                .attr( {\n\n                    // Setting tabIndex makes the div focusable\n                    tabIndex: -1,\n                    role: \"dialog\"\n                } )\n                .appendTo( this._appendTo() );\n\n            this._addClass( this.uiDialog, \"ui-dialog\", \"ui-widget ui-widget-content ui-front\" );\n            this._on( this.uiDialog, {\n                keydown: function( event ) {\n                    if ( this.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode &&\n                        event.keyCode === $.ui.keyCode.ESCAPE ) {\n                        event.preventDefault();\n                        this.close( event );\n                        return;\n                    }\n\n                    // Prevent tabbing out of dialogs\n                    if ( event.keyCode !== $.ui.keyCode.TAB || event.isDefaultPrevented() ) {\n                        return;\n                    }\n                    var tabbables = this.uiDialog.find( \":tabbable\" ),\n                        first = tabbables.first(),\n                        last = tabbables.last();\n\n                    if ( ( event.target === last[ 0 ] || event.target === this.uiDialog[ 0 ] ) &&\n                        !event.shiftKey ) {\n                        this._delay( function() {\n                            first.trigger( \"focus\" );\n                        } );\n                        event.preventDefault();\n                    } else if ( ( event.target === first[ 0 ] ||\n                        event.target === this.uiDialog[ 0 ] ) && event.shiftKey ) {\n                        this._delay( function() {\n                            last.trigger( \"focus\" );\n                        } );\n                        event.preventDefault();\n                    }\n                },\n                mousedown: function( event ) {\n                    if ( this._moveToTop( event ) ) {\n                        this._focusTabbable();\n                    }\n                }\n            } );\n\n            // We assume that any existing aria-describedby attribute means\n            // that the dialog content is marked up properly\n            // otherwise we brute force the content as the description\n            if ( !this.element.find( \"[aria-describedby]\" ).length ) {\n                this.uiDialog.attr( {\n                    \"aria-describedby\": this.element.uniqueId().attr( \"id\" )\n                } );\n            }\n        },\n\n        _createTitlebar: function() {\n            var uiDialogTitle;\n\n            this.uiDialogTitlebar = $( \"<div>\" );\n            this._addClass( this.uiDialogTitlebar,\n                \"ui-dialog-titlebar\", \"ui-widget-header ui-helper-clearfix\" );\n            this._on( this.uiDialogTitlebar, {\n                mousedown: function( event ) {\n\n                    // Don't prevent click on close button (#8838)\n                    // Focusing a dialog that is partially scrolled out of view\n                    // causes the browser to scroll it into view, preventing the click event\n                    if ( !$( event.target ).closest( \".ui-dialog-titlebar-close\" ) ) {\n\n                        // Dialog isn't getting focus when dragging (#8063)\n                        this.uiDialog.trigger( \"focus\" );\n                    }\n                }\n            } );\n\n            // Support: IE\n            // Use type=\"button\" to prevent enter keypresses in textboxes from closing the\n            // dialog in IE (#9312)\n            this.uiDialogTitlebarClose = $( \"<button type='button'></button>\" )\n                .button( {\n                    label: $( \"<a>\" ).text( this.options.closeText ).html(),\n                    icon: \"ui-icon-closethick\",\n                    showLabel: false\n                } )\n                .appendTo( this.uiDialogTitlebar );\n\n            this._addClass( this.uiDialogTitlebarClose, \"ui-dialog-titlebar-close\" );\n            this._on( this.uiDialogTitlebarClose, {\n                click: function( event ) {\n                    event.preventDefault();\n                    this.close( event );\n                }\n            } );\n\n            uiDialogTitle = $( \"<span>\" ).uniqueId().prependTo( this.uiDialogTitlebar );\n            this._addClass( uiDialogTitle, \"ui-dialog-title\" );\n            this._title( uiDialogTitle );\n\n            this.uiDialogTitlebar.prependTo( this.uiDialog );\n\n            this.uiDialog.attr( {\n                \"aria-labelledby\": uiDialogTitle.attr( \"id\" )\n            } );\n        },\n\n        _title: function( title ) {\n            if ( this.options.title ) {\n                title.text( this.options.title );\n            } else {\n                title.html( \"&#160;\" );\n            }\n        },\n\n        _createButtonPane: function() {\n            this.uiDialogButtonPane = $( \"<div>\" );\n            this._addClass( this.uiDialogButtonPane, \"ui-dialog-buttonpane\",\n                \"ui-widget-content ui-helper-clearfix\" );\n\n            this.uiButtonSet = $( \"<div>\" )\n                .appendTo( this.uiDialogButtonPane );\n            this._addClass( this.uiButtonSet, \"ui-dialog-buttonset\" );\n\n            this._createButtons();\n        },\n\n        _createButtons: function() {\n            var that = this,\n                buttons = this.options.buttons;\n\n            // If we already have a button pane, remove it\n            this.uiDialogButtonPane.remove();\n            this.uiButtonSet.empty();\n\n            if ( $.isEmptyObject( buttons ) || ( Array.isArray( buttons ) && !buttons.length ) ) {\n                this._removeClass( this.uiDialog, \"ui-dialog-buttons\" );\n                return;\n            }\n\n            $.each( buttons, function( name, props ) {\n                var click, buttonOptions;\n                props = typeof props === \"function\" ?\n                    { click: props, text: name } :\n                    props;\n\n                // Default to a non-submitting button\n                props = $.extend( { type: \"button\" }, props );\n\n                // Change the context for the click callback to be the main element\n                click = props.click;\n                buttonOptions = {\n                    icon: props.icon,\n                    iconPosition: props.iconPosition,\n                    showLabel: props.showLabel,\n\n                    // Deprecated options\n                    icons: props.icons,\n                    text: props.text\n                };\n\n                delete props.click;\n                delete props.icon;\n                delete props.iconPosition;\n                delete props.showLabel;\n\n                // Deprecated options\n                delete props.icons;\n                if ( typeof props.text === \"boolean\" ) {\n                    delete props.text;\n                }\n\n                $( \"<button></button>\", props )\n                    .button( buttonOptions )\n                    .appendTo( that.uiButtonSet )\n                    .on( \"click\", function() {\n                        click.apply( that.element[ 0 ], arguments );\n                    } );\n            } );\n            this._addClass( this.uiDialog, \"ui-dialog-buttons\" );\n            this.uiDialogButtonPane.appendTo( this.uiDialog );\n        },\n\n        _makeDraggable: function() {\n            var that = this,\n                options = this.options;\n\n            function filteredUi( ui ) {\n                return {\n                    position: ui.position,\n                    offset: ui.offset\n                };\n            }\n\n            this.uiDialog.draggable( {\n                cancel: \".ui-dialog-content, .ui-dialog-titlebar-close\",\n                handle: \".ui-dialog-titlebar\",\n                containment: \"document\",\n                start: function( event, ui ) {\n                    that._addClass( $( this ), \"ui-dialog-dragging\" );\n                    that._blockFrames();\n                    that._trigger( \"dragStart\", event, filteredUi( ui ) );\n                },\n                drag: function( event, ui ) {\n                    that._trigger( \"drag\", event, filteredUi( ui ) );\n                },\n                stop: function( event, ui ) {\n                    var left = ui.offset.left - that.document.scrollLeft(),\n                        top = ui.offset.top - that.document.scrollTop();\n\n                    options.position = {\n                        my: \"left top\",\n                        at: \"left\" + ( left >= 0 ? \"+\" : \"\" ) + left + \" \" +\n                            \"top\" + ( top >= 0 ? \"+\" : \"\" ) + top,\n                        of: that.window\n                    };\n                    that._removeClass( $( this ), \"ui-dialog-dragging\" );\n                    that._unblockFrames();\n                    that._trigger( \"dragStop\", event, filteredUi( ui ) );\n                }\n            } );\n        },\n\n        _makeResizable: function() {\n            var that = this,\n                options = this.options,\n                handles = options.resizable,\n\n                // .ui-resizable has position: relative defined in the stylesheet\n                // but dialogs have to use absolute or fixed positioning\n                position = this.uiDialog.css( \"position\" ),\n                resizeHandles = typeof handles === \"string\" ?\n                    handles :\n                    \"n,e,s,w,se,sw,ne,nw\";\n\n            function filteredUi( ui ) {\n                return {\n                    originalPosition: ui.originalPosition,\n                    originalSize: ui.originalSize,\n                    position: ui.position,\n                    size: ui.size\n                };\n            }\n\n            this.uiDialog.resizable( {\n                cancel: \".ui-dialog-content\",\n                containment: \"document\",\n                alsoResize: this.element,\n                maxWidth: options.maxWidth,\n                maxHeight: options.maxHeight,\n                minWidth: options.minWidth,\n                minHeight: this._minHeight(),\n                handles: resizeHandles,\n                start: function( event, ui ) {\n                    that._addClass( $( this ), \"ui-dialog-resizing\" );\n                    that._blockFrames();\n                    that._trigger( \"resizeStart\", event, filteredUi( ui ) );\n                },\n                resize: function( event, ui ) {\n                    that._trigger( \"resize\", event, filteredUi( ui ) );\n                },\n                stop: function( event, ui ) {\n                    var offset = that.uiDialog.offset(),\n                        left = offset.left - that.document.scrollLeft(),\n                        top = offset.top - that.document.scrollTop();\n\n                    options.height = that.uiDialog.height();\n                    options.width = that.uiDialog.width();\n                    options.position = {\n                        my: \"left top\",\n                        at: \"left\" + ( left >= 0 ? \"+\" : \"\" ) + left + \" \" +\n                            \"top\" + ( top >= 0 ? \"+\" : \"\" ) + top,\n                        of: that.window\n                    };\n                    that._removeClass( $( this ), \"ui-dialog-resizing\" );\n                    that._unblockFrames();\n                    that._trigger( \"resizeStop\", event, filteredUi( ui ) );\n                }\n            } )\n                .css( \"position\", position );\n        },\n\n        _trackFocus: function() {\n            this._on( this.widget(), {\n                focusin: function( event ) {\n                    this._makeFocusTarget();\n                    this._focusedElement = $( event.target );\n                }\n            } );\n        },\n\n        _makeFocusTarget: function() {\n            this._untrackInstance();\n            this._trackingInstances().unshift( this );\n        },\n\n        _untrackInstance: function() {\n            var instances = this._trackingInstances(),\n                exists = $.inArray( this, instances );\n            if ( exists !== -1 ) {\n                instances.splice( exists, 1 );\n            }\n        },\n\n        _trackingInstances: function() {\n            var instances = this.document.data( \"ui-dialog-instances\" );\n            if ( !instances ) {\n                instances = [];\n                this.document.data( \"ui-dialog-instances\", instances );\n            }\n            return instances;\n        },\n\n        _minHeight: function() {\n            var options = this.options;\n\n            return options.height === \"auto\" ?\n                options.minHeight :\n                Math.min( options.minHeight, options.height );\n        },\n\n        _position: function() {\n\n            // Need to show the dialog to get the actual offset in the position plugin\n            var isVisible = this.uiDialog.is( \":visible\" );\n            if ( !isVisible ) {\n                this.uiDialog.show();\n            }\n            this.uiDialog.position( this.options.position );\n            if ( !isVisible ) {\n                this.uiDialog.hide();\n            }\n        },\n\n        _setOptions: function( options ) {\n            var that = this,\n                resize = false,\n                resizableOptions = {};\n\n            $.each( options, function( key, value ) {\n                that._setOption( key, value );\n\n                if ( key in that.sizeRelatedOptions ) {\n                    resize = true;\n                }\n                if ( key in that.resizableRelatedOptions ) {\n                    resizableOptions[ key ] = value;\n                }\n            } );\n\n            if ( resize ) {\n                this._size();\n                this._position();\n            }\n            if ( this.uiDialog.is( \":data(ui-resizable)\" ) ) {\n                this.uiDialog.resizable( \"option\", resizableOptions );\n            }\n        },\n\n        _setOption: function( key, value ) {\n            var isDraggable, isResizable,\n                uiDialog = this.uiDialog;\n\n            if ( key === \"disabled\" ) {\n                return;\n            }\n\n            this._super( key, value );\n\n            if ( key === \"appendTo\" ) {\n                this.uiDialog.appendTo( this._appendTo() );\n            }\n\n            if ( key === \"buttons\" ) {\n                this._createButtons();\n            }\n\n            if ( key === \"closeText\" ) {\n                this.uiDialogTitlebarClose.button( {\n\n                    // Ensure that we always pass a string\n                    label: $( \"<a>\" ).text( \"\" + this.options.closeText ).html()\n                } );\n            }\n\n            if ( key === \"draggable\" ) {\n                isDraggable = uiDialog.is( \":data(ui-draggable)\" );\n                if ( isDraggable && !value ) {\n                    uiDialog.draggable( \"destroy\" );\n                }\n\n                if ( !isDraggable && value ) {\n                    this._makeDraggable();\n                }\n            }\n\n            if ( key === \"position\" ) {\n                this._position();\n            }\n\n            if ( key === \"resizable\" ) {\n\n                // currently resizable, becoming non-resizable\n                isResizable = uiDialog.is( \":data(ui-resizable)\" );\n                if ( isResizable && !value ) {\n                    uiDialog.resizable( \"destroy\" );\n                }\n\n                // Currently resizable, changing handles\n                if ( isResizable && typeof value === \"string\" ) {\n                    uiDialog.resizable( \"option\", \"handles\", value );\n                }\n\n                // Currently non-resizable, becoming resizable\n                if ( !isResizable && value !== false ) {\n                    this._makeResizable();\n                }\n            }\n\n            if ( key === \"title\" ) {\n                this._title( this.uiDialogTitlebar.find( \".ui-dialog-title\" ) );\n            }\n        },\n\n        _size: function() {\n\n            // If the user has resized the dialog, the .ui-dialog and .ui-dialog-content\n            // divs will both have width and height set, so we need to reset them\n            var nonContentHeight, minContentHeight, maxContentHeight,\n                options = this.options;\n\n            // Reset content sizing\n            this.element.show().css( {\n                width: \"auto\",\n                minHeight: 0,\n                maxHeight: \"none\",\n                height: 0\n            } );\n\n            if ( options.minWidth > options.width ) {\n                options.width = options.minWidth;\n            }\n\n            // Reset wrapper sizing\n            // determine the height of all the non-content elements\n            nonContentHeight = this.uiDialog.css( {\n                height: \"auto\",\n                width: options.width\n            } )\n                .outerHeight();\n            minContentHeight = Math.max( 0, options.minHeight - nonContentHeight );\n            maxContentHeight = typeof options.maxHeight === \"number\" ?\n                Math.max( 0, options.maxHeight - nonContentHeight ) :\n                \"none\";\n\n            if ( options.height === \"auto\" ) {\n                this.element.css( {\n                    minHeight: minContentHeight,\n                    maxHeight: maxContentHeight,\n                    height: \"auto\"\n                } );\n            } else {\n                this.element.height( Math.max( 0, options.height - nonContentHeight ) );\n            }\n\n            if ( this.uiDialog.is( \":data(ui-resizable)\" ) ) {\n                this.uiDialog.resizable( \"option\", \"minHeight\", this._minHeight() );\n            }\n        },\n\n        _blockFrames: function() {\n            this.iframeBlocks = this.document.find( \"iframe\" ).map( function() {\n                var iframe = $( this );\n\n                return $( \"<div>\" )\n                    .css( {\n                        position: \"absolute\",\n                        width: iframe.outerWidth(),\n                        height: iframe.outerHeight()\n                    } )\n                    .appendTo( iframe.parent() )\n                    .offset( iframe.offset() )[ 0 ];\n            } );\n        },\n\n        _unblockFrames: function() {\n            if ( this.iframeBlocks ) {\n                this.iframeBlocks.remove();\n                delete this.iframeBlocks;\n            }\n        },\n\n        _allowInteraction: function( event ) {\n            if ( $( event.target ).closest( \".ui-dialog\" ).length ) {\n                return true;\n            }\n\n            // TODO: Remove hack when datepicker implements\n            // the .ui-front logic (#8989)\n            return !!$( event.target ).closest( \".ui-datepicker\" ).length;\n        },\n\n        _createOverlay: function() {\n            if ( !this.options.modal ) {\n                return;\n            }\n\n            var jqMinor = $.fn.jquery.substring( 0, 4 );\n\n            // We use a delay in case the overlay is created from an\n            // event that we're going to be cancelling (#2804)\n            var isOpening = true;\n            this._delay( function() {\n                isOpening = false;\n            } );\n\n            if ( !this.document.data( \"ui-dialog-overlays\" ) ) {\n\n                // Prevent use of anchors and inputs\n                // This doesn't use `_on()` because it is a shared event handler\n                // across all open modal dialogs.\n                this.document.on( \"focusin.ui-dialog\", function( event ) {\n                    if ( isOpening ) {\n                        return;\n                    }\n\n                    var instance = this._trackingInstances()[ 0 ];\n                    if ( !instance._allowInteraction( event ) ) {\n                        event.preventDefault();\n                        instance._focusTabbable();\n\n                        // Support: jQuery >=3.4 <3.6 only\n                        // Focus re-triggering in jQuery 3.4/3.5 makes the original element\n                        // have its focus event propagated last, breaking the re-targeting.\n                        // Trigger focus in a delay in addition if needed to avoid the issue\n                        // See https://github.com/jquery/jquery/issues/4382\n                        if ( jqMinor === \"3.4.\" || jqMinor === \"3.5.\" ) {\n                            instance._delay( instance._restoreTabbableFocus );\n                        }\n                    }\n                }.bind( this ) );\n            }\n\n            this.overlay = $( \"<div>\" )\n                .appendTo( this._appendTo() );\n\n            this._addClass( this.overlay, null, \"ui-widget-overlay ui-front\" );\n            this._on( this.overlay, {\n                mousedown: \"_keepFocus\"\n            } );\n            this.document.data( \"ui-dialog-overlays\",\n                ( this.document.data( \"ui-dialog-overlays\" ) || 0 ) + 1 );\n        },\n\n        _destroyOverlay: function() {\n            if ( !this.options.modal ) {\n                return;\n            }\n\n            if ( this.overlay ) {\n                var overlays = this.document.data( \"ui-dialog-overlays\" ) - 1;\n\n                if ( !overlays ) {\n                    this.document.off( \"focusin.ui-dialog\" );\n                    this.document.removeData( \"ui-dialog-overlays\" );\n                } else {\n                    this.document.data( \"ui-dialog-overlays\", overlays );\n                }\n\n                this.overlay.remove();\n                this.overlay = null;\n            }\n        }\n    } );\n\n// DEPRECATED\n// TODO: switch return back to widget declaration at top of file when this is removed\n    if ( $.uiBackCompat !== false ) {\n\n        // Backcompat for dialogClass option\n        $.widget( \"ui.dialog\", $.ui.dialog, {\n            options: {\n                dialogClass: \"\"\n            },\n            _createWrapper: function() {\n                this._super();\n                this.uiDialog.addClass( this.options.dialogClass );\n            },\n            _setOption: function( key, value ) {\n                if ( key === \"dialogClass\" ) {\n                    this.uiDialog\n                        .removeClass( this.options.dialogClass )\n                        .addClass( value );\n                }\n                this._superApply( arguments );\n            }\n        } );\n    }\n\n    return $.ui.dialog;\n\n} );\n","jquery/ui-modules/widgets/draggable.js":"/*!\n * jQuery UI Draggable 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Draggable\n//>>group: Interactions\n//>>description: Enables dragging functionality for any element.\n//>>docs: http://api.jqueryui.com/draggable/\n//>>demos: http://jqueryui.com/draggable/\n//>>css.structure: ../../themes/base/draggable.css\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n            \"./mouse\",\n            \"../data\",\n            \"../plugin\",\n            \"../safe-active-element\",\n            \"../safe-blur\",\n            \"../scroll-parent\",\n            \"../version\",\n            \"../widget\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    $.widget( \"ui.draggable\", $.ui.mouse, {\n        version: \"1.13.2\",\n        widgetEventPrefix: \"drag\",\n        options: {\n            addClasses: true,\n            appendTo: \"parent\",\n            axis: false,\n            connectToSortable: false,\n            containment: false,\n            cursor: \"auto\",\n            cursorAt: false,\n            grid: false,\n            handle: false,\n            helper: \"original\",\n            iframeFix: false,\n            opacity: false,\n            refreshPositions: false,\n            revert: false,\n            revertDuration: 500,\n            scope: \"default\",\n            scroll: true,\n            scrollSensitivity: 20,\n            scrollSpeed: 20,\n            snap: false,\n            snapMode: \"both\",\n            snapTolerance: 20,\n            stack: false,\n            zIndex: false,\n\n            // Callbacks\n            drag: null,\n            start: null,\n            stop: null\n        },\n        _create: function() {\n\n            if ( this.options.helper === \"original\" ) {\n                this._setPositionRelative();\n            }\n            if ( this.options.addClasses ) {\n                this._addClass( \"ui-draggable\" );\n            }\n            this._setHandleClassName();\n\n            this._mouseInit();\n        },\n\n        _setOption: function( key, value ) {\n            this._super( key, value );\n            if ( key === \"handle\" ) {\n                this._removeHandleClassName();\n                this._setHandleClassName();\n            }\n        },\n\n        _destroy: function() {\n            if ( ( this.helper || this.element ).is( \".ui-draggable-dragging\" ) ) {\n                this.destroyOnClear = true;\n                return;\n            }\n            this._removeHandleClassName();\n            this._mouseDestroy();\n        },\n\n        _mouseCapture: function( event ) {\n            var o = this.options;\n\n            // Among others, prevent a drag on a resizable-handle\n            if ( this.helper || o.disabled ||\n                $( event.target ).closest( \".ui-resizable-handle\" ).length > 0 ) {\n                return false;\n            }\n\n            //Quit if we're not on a valid handle\n            this.handle = this._getHandle( event );\n            if ( !this.handle ) {\n                return false;\n            }\n\n            this._blurActiveElement( event );\n\n            this._blockFrames( o.iframeFix === true ? \"iframe\" : o.iframeFix );\n\n            return true;\n\n        },\n\n        _blockFrames: function( selector ) {\n            this.iframeBlocks = this.document.find( selector ).map( function() {\n                var iframe = $( this );\n\n                return $( \"<div>\" )\n                    .css( \"position\", \"absolute\" )\n                    .appendTo( iframe.parent() )\n                    .outerWidth( iframe.outerWidth() )\n                    .outerHeight( iframe.outerHeight() )\n                    .offset( iframe.offset() )[ 0 ];\n            } );\n        },\n\n        _unblockFrames: function() {\n            if ( this.iframeBlocks ) {\n                this.iframeBlocks.remove();\n                delete this.iframeBlocks;\n            }\n        },\n\n        _blurActiveElement: function( event ) {\n            var activeElement = $.ui.safeActiveElement( this.document[ 0 ] ),\n                target = $( event.target );\n\n            // Don't blur if the event occurred on an element that is within\n            // the currently focused element\n            // See #10527, #12472\n            if ( target.closest( activeElement ).length ) {\n                return;\n            }\n\n            // Blur any element that currently has focus, see #4261\n            $.ui.safeBlur( activeElement );\n        },\n\n        _mouseStart: function( event ) {\n\n            var o = this.options;\n\n            //Create and append the visible helper\n            this.helper = this._createHelper( event );\n\n            this._addClass( this.helper, \"ui-draggable-dragging\" );\n\n            //Cache the helper size\n            this._cacheHelperProportions();\n\n            //If ddmanager is used for droppables, set the global draggable\n            if ( $.ui.ddmanager ) {\n                $.ui.ddmanager.current = this;\n            }\n\n            /*\n             * - Position generation -\n             * This block generates everything position related - it's the core of draggables.\n             */\n\n            //Cache the margins of the original element\n            this._cacheMargins();\n\n            //Store the helper's css position\n            this.cssPosition = this.helper.css( \"position\" );\n            this.scrollParent = this.helper.scrollParent( true );\n            this.offsetParent = this.helper.offsetParent();\n            this.hasFixedAncestor = this.helper.parents().filter( function() {\n                return $( this ).css( \"position\" ) === \"fixed\";\n            } ).length > 0;\n\n            //The element's absolute position on the page minus margins\n            this.positionAbs = this.element.offset();\n            this._refreshOffsets( event );\n\n            //Generate the original position\n            this.originalPosition = this.position = this._generatePosition( event, false );\n            this.originalPageX = event.pageX;\n            this.originalPageY = event.pageY;\n\n            //Adjust the mouse offset relative to the helper if \"cursorAt\" is supplied\n            if ( o.cursorAt ) {\n                this._adjustOffsetFromHelper( o.cursorAt );\n            }\n\n            //Set a containment if given in the options\n            this._setContainment();\n\n            //Trigger event + callbacks\n            if ( this._trigger( \"start\", event ) === false ) {\n                this._clear();\n                return false;\n            }\n\n            //Recache the helper size\n            this._cacheHelperProportions();\n\n            //Prepare the droppable offsets\n            if ( $.ui.ddmanager && !o.dropBehaviour ) {\n                $.ui.ddmanager.prepareOffsets( this, event );\n            }\n\n            // Execute the drag once - this causes the helper not to be visible before getting its\n            // correct position\n            this._mouseDrag( event, true );\n\n            // If the ddmanager is used for droppables, inform the manager that dragging has started\n            // (see #5003)\n            if ( $.ui.ddmanager ) {\n                $.ui.ddmanager.dragStart( this, event );\n            }\n\n            return true;\n        },\n\n        _refreshOffsets: function( event ) {\n            this.offset = {\n                top: this.positionAbs.top - this.margins.top,\n                left: this.positionAbs.left - this.margins.left,\n                scroll: false,\n                parent: this._getParentOffset(),\n                relative: this._getRelativeOffset()\n            };\n\n            this.offset.click = {\n                left: event.pageX - this.offset.left,\n                top: event.pageY - this.offset.top\n            };\n        },\n\n        _mouseDrag: function( event, noPropagation ) {\n\n            // reset any necessary cached properties (see #5009)\n            if ( this.hasFixedAncestor ) {\n                this.offset.parent = this._getParentOffset();\n            }\n\n            //Compute the helpers position\n            this.position = this._generatePosition( event, true );\n            this.positionAbs = this._convertPositionTo( \"absolute\" );\n\n            //Call plugins and callbacks and use the resulting position if something is returned\n            if ( !noPropagation ) {\n                var ui = this._uiHash();\n                if ( this._trigger( \"drag\", event, ui ) === false ) {\n                    this._mouseUp( new $.Event( \"mouseup\", event ) );\n                    return false;\n                }\n                this.position = ui.position;\n            }\n\n            this.helper[ 0 ].style.left = this.position.left + \"px\";\n            this.helper[ 0 ].style.top = this.position.top + \"px\";\n\n            if ( $.ui.ddmanager ) {\n                $.ui.ddmanager.drag( this, event );\n            }\n\n            return false;\n        },\n\n        _mouseStop: function( event ) {\n\n            //If we are using droppables, inform the manager about the drop\n            var that = this,\n                dropped = false;\n            if ( $.ui.ddmanager && !this.options.dropBehaviour ) {\n                dropped = $.ui.ddmanager.drop( this, event );\n            }\n\n            //if a drop comes from outside (a sortable)\n            if ( this.dropped ) {\n                dropped = this.dropped;\n                this.dropped = false;\n            }\n\n            if ( ( this.options.revert === \"invalid\" && !dropped ) ||\n                ( this.options.revert === \"valid\" && dropped ) ||\n                this.options.revert === true || ( typeof this.options.revert === \"function\" &&\n                    this.options.revert.call( this.element, dropped ) )\n            ) {\n                $( this.helper ).animate(\n                    this.originalPosition,\n                    parseInt( this.options.revertDuration, 10 ),\n                    function() {\n                        if ( that._trigger( \"stop\", event ) !== false ) {\n                            that._clear();\n                        }\n                    }\n                );\n            } else {\n                if ( this._trigger( \"stop\", event ) !== false ) {\n                    this._clear();\n                }\n            }\n\n            return false;\n        },\n\n        _mouseUp: function( event ) {\n            this._unblockFrames();\n\n            // If the ddmanager is used for droppables, inform the manager that dragging has stopped\n            // (see #5003)\n            if ( $.ui.ddmanager ) {\n                $.ui.ddmanager.dragStop( this, event );\n            }\n\n            // Only need to focus if the event occurred on the draggable itself, see #10527\n            if ( this.handleElement.is( event.target ) ) {\n\n                // The interaction is over; whether or not the click resulted in a drag,\n                // focus the element\n                this.element.trigger( \"focus\" );\n            }\n\n            return $.ui.mouse.prototype._mouseUp.call( this, event );\n        },\n\n        cancel: function() {\n\n            if ( this.helper.is( \".ui-draggable-dragging\" ) ) {\n                this._mouseUp( new $.Event( \"mouseup\", { target: this.element[ 0 ] } ) );\n            } else {\n                this._clear();\n            }\n\n            return this;\n\n        },\n\n        _getHandle: function( event ) {\n            return this.options.handle ?\n                !!$( event.target ).closest( this.element.find( this.options.handle ) ).length :\n                true;\n        },\n\n        _setHandleClassName: function() {\n            this.handleElement = this.options.handle ?\n                this.element.find( this.options.handle ) : this.element;\n            this._addClass( this.handleElement, \"ui-draggable-handle\" );\n        },\n\n        _removeHandleClassName: function() {\n            this._removeClass( this.handleElement, \"ui-draggable-handle\" );\n        },\n\n        _createHelper: function( event ) {\n\n            var o = this.options,\n                helperIsFunction = typeof o.helper === \"function\",\n                helper = helperIsFunction ?\n                    $( o.helper.apply( this.element[ 0 ], [ event ] ) ) :\n                    ( o.helper === \"clone\" ?\n                        this.element.clone().removeAttr( \"id\" ) :\n                        this.element );\n\n            if ( !helper.parents( \"body\" ).length ) {\n                helper.appendTo( ( o.appendTo === \"parent\" ?\n                    this.element[ 0 ].parentNode :\n                    o.appendTo ) );\n            }\n\n            // Http://bugs.jqueryui.com/ticket/9446\n            // a helper function can return the original element\n            // which wouldn't have been set to relative in _create\n            if ( helperIsFunction && helper[ 0 ] === this.element[ 0 ] ) {\n                this._setPositionRelative();\n            }\n\n            if ( helper[ 0 ] !== this.element[ 0 ] &&\n                !( /(fixed|absolute)/ ).test( helper.css( \"position\" ) ) ) {\n                helper.css( \"position\", \"absolute\" );\n            }\n\n            return helper;\n\n        },\n\n        _setPositionRelative: function() {\n            if ( !( /^(?:r|a|f)/ ).test( this.element.css( \"position\" ) ) ) {\n                this.element[ 0 ].style.position = \"relative\";\n            }\n        },\n\n        _adjustOffsetFromHelper: function( obj ) {\n            if ( typeof obj === \"string\" ) {\n                obj = obj.split( \" \" );\n            }\n            if ( Array.isArray( obj ) ) {\n                obj = { left: +obj[ 0 ], top: +obj[ 1 ] || 0 };\n            }\n            if ( \"left\" in obj ) {\n                this.offset.click.left = obj.left + this.margins.left;\n            }\n            if ( \"right\" in obj ) {\n                this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;\n            }\n            if ( \"top\" in obj ) {\n                this.offset.click.top = obj.top + this.margins.top;\n            }\n            if ( \"bottom\" in obj ) {\n                this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;\n            }\n        },\n\n        _isRootNode: function( element ) {\n            return ( /(html|body)/i ).test( element.tagName ) || element === this.document[ 0 ];\n        },\n\n        _getParentOffset: function() {\n\n            //Get the offsetParent and cache its position\n            var po = this.offsetParent.offset(),\n                document = this.document[ 0 ];\n\n            // This is a special case where we need to modify a offset calculated on start, since the\n            // following happened:\n            // 1. The position of the helper is absolute, so it's position is calculated based on the\n            // next positioned parent\n            // 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't\n            // the document, which means that the scroll is included in the initial calculation of the\n            // offset of the parent, and never recalculated upon drag\n            if ( this.cssPosition === \"absolute\" && this.scrollParent[ 0 ] !== document &&\n                $.contains( this.scrollParent[ 0 ], this.offsetParent[ 0 ] ) ) {\n                po.left += this.scrollParent.scrollLeft();\n                po.top += this.scrollParent.scrollTop();\n            }\n\n            if ( this._isRootNode( this.offsetParent[ 0 ] ) ) {\n                po = { top: 0, left: 0 };\n            }\n\n            return {\n                top: po.top + ( parseInt( this.offsetParent.css( \"borderTopWidth\" ), 10 ) || 0 ),\n                left: po.left + ( parseInt( this.offsetParent.css( \"borderLeftWidth\" ), 10 ) || 0 )\n            };\n\n        },\n\n        _getRelativeOffset: function() {\n            if ( this.cssPosition !== \"relative\" ) {\n                return { top: 0, left: 0 };\n            }\n\n            var p = this.element.position(),\n                scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] );\n\n            return {\n                top: p.top - ( parseInt( this.helper.css( \"top\" ), 10 ) || 0 ) +\n                    ( !scrollIsRootNode ? this.scrollParent.scrollTop() : 0 ),\n                left: p.left - ( parseInt( this.helper.css( \"left\" ), 10 ) || 0 ) +\n                    ( !scrollIsRootNode ? this.scrollParent.scrollLeft() : 0 )\n            };\n\n        },\n\n        _cacheMargins: function() {\n            this.margins = {\n                left: ( parseInt( this.element.css( \"marginLeft\" ), 10 ) || 0 ),\n                top: ( parseInt( this.element.css( \"marginTop\" ), 10 ) || 0 ),\n                right: ( parseInt( this.element.css( \"marginRight\" ), 10 ) || 0 ),\n                bottom: ( parseInt( this.element.css( \"marginBottom\" ), 10 ) || 0 )\n            };\n        },\n\n        _cacheHelperProportions: function() {\n            this.helperProportions = {\n                width: this.helper.outerWidth(),\n                height: this.helper.outerHeight()\n            };\n        },\n\n        _setContainment: function() {\n\n            var isUserScrollable, c, ce,\n                o = this.options,\n                document = this.document[ 0 ];\n\n            this.relativeContainer = null;\n\n            if ( !o.containment ) {\n                this.containment = null;\n                return;\n            }\n\n            if ( o.containment === \"window\" ) {\n                this.containment = [\n                    $( window ).scrollLeft() - this.offset.relative.left - this.offset.parent.left,\n                    $( window ).scrollTop() - this.offset.relative.top - this.offset.parent.top,\n                    $( window ).scrollLeft() + $( window ).width() -\n                    this.helperProportions.width - this.margins.left,\n                    $( window ).scrollTop() +\n                    ( $( window ).height() || document.body.parentNode.scrollHeight ) -\n                    this.helperProportions.height - this.margins.top\n                ];\n                return;\n            }\n\n            if ( o.containment === \"document\" ) {\n                this.containment = [\n                    0,\n                    0,\n                    $( document ).width() - this.helperProportions.width - this.margins.left,\n                    ( $( document ).height() || document.body.parentNode.scrollHeight ) -\n                    this.helperProportions.height - this.margins.top\n                ];\n                return;\n            }\n\n            if ( o.containment.constructor === Array ) {\n                this.containment = o.containment;\n                return;\n            }\n\n            if ( o.containment === \"parent\" ) {\n                o.containment = this.helper[ 0 ].parentNode;\n            }\n\n            c = $( o.containment );\n            ce = c[ 0 ];\n\n            if ( !ce ) {\n                return;\n            }\n\n            isUserScrollable = /(scroll|auto)/.test( c.css( \"overflow\" ) );\n\n            this.containment = [\n                ( parseInt( c.css( \"borderLeftWidth\" ), 10 ) || 0 ) +\n                ( parseInt( c.css( \"paddingLeft\" ), 10 ) || 0 ),\n                ( parseInt( c.css( \"borderTopWidth\" ), 10 ) || 0 ) +\n                ( parseInt( c.css( \"paddingTop\" ), 10 ) || 0 ),\n                ( isUserScrollable ? Math.max( ce.scrollWidth, ce.offsetWidth ) : ce.offsetWidth ) -\n                ( parseInt( c.css( \"borderRightWidth\" ), 10 ) || 0 ) -\n                ( parseInt( c.css( \"paddingRight\" ), 10 ) || 0 ) -\n                this.helperProportions.width -\n                this.margins.left -\n                this.margins.right,\n                ( isUserScrollable ? Math.max( ce.scrollHeight, ce.offsetHeight ) : ce.offsetHeight ) -\n                ( parseInt( c.css( \"borderBottomWidth\" ), 10 ) || 0 ) -\n                ( parseInt( c.css( \"paddingBottom\" ), 10 ) || 0 ) -\n                this.helperProportions.height -\n                this.margins.top -\n                this.margins.bottom\n            ];\n            this.relativeContainer = c;\n        },\n\n        _convertPositionTo: function( d, pos ) {\n\n            if ( !pos ) {\n                pos = this.position;\n            }\n\n            var mod = d === \"absolute\" ? 1 : -1,\n                scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] );\n\n            return {\n                top: (\n\n                    // The absolute mouse position\n                    pos.top\t+\n\n                    // Only for relative positioned nodes: Relative offset from element to offset parent\n                    this.offset.relative.top * mod +\n\n                    // The offsetParent's offset without borders (offset + border)\n                    this.offset.parent.top * mod -\n                    ( ( this.cssPosition === \"fixed\" ?\n                        -this.offset.scroll.top :\n                        ( scrollIsRootNode ? 0 : this.offset.scroll.top ) ) * mod )\n                ),\n                left: (\n\n                    // The absolute mouse position\n                    pos.left +\n\n                    // Only for relative positioned nodes: Relative offset from element to offset parent\n                    this.offset.relative.left * mod +\n\n                    // The offsetParent's offset without borders (offset + border)\n                    this.offset.parent.left * mod\t-\n                    ( ( this.cssPosition === \"fixed\" ?\n                        -this.offset.scroll.left :\n                        ( scrollIsRootNode ? 0 : this.offset.scroll.left ) ) * mod )\n                )\n            };\n\n        },\n\n        _generatePosition: function( event, constrainPosition ) {\n\n            var containment, co, top, left,\n                o = this.options,\n                scrollIsRootNode = this._isRootNode( this.scrollParent[ 0 ] ),\n                pageX = event.pageX,\n                pageY = event.pageY;\n\n            // Cache the scroll\n            if ( !scrollIsRootNode || !this.offset.scroll ) {\n                this.offset.scroll = {\n                    top: this.scrollParent.scrollTop(),\n                    left: this.scrollParent.scrollLeft()\n                };\n            }\n\n            /*\n             * - Position constraining -\n             * Constrain the position to a mix of grid, containment.\n             */\n\n            // If we are not dragging yet, we won't check for options\n            if ( constrainPosition ) {\n                if ( this.containment ) {\n                    if ( this.relativeContainer ) {\n                        co = this.relativeContainer.offset();\n                        containment = [\n                            this.containment[ 0 ] + co.left,\n                            this.containment[ 1 ] + co.top,\n                            this.containment[ 2 ] + co.left,\n                            this.containment[ 3 ] + co.top\n                        ];\n                    } else {\n                        containment = this.containment;\n                    }\n\n                    if ( event.pageX - this.offset.click.left < containment[ 0 ] ) {\n                        pageX = containment[ 0 ] + this.offset.click.left;\n                    }\n                    if ( event.pageY - this.offset.click.top < containment[ 1 ] ) {\n                        pageY = containment[ 1 ] + this.offset.click.top;\n                    }\n                    if ( event.pageX - this.offset.click.left > containment[ 2 ] ) {\n                        pageX = containment[ 2 ] + this.offset.click.left;\n                    }\n                    if ( event.pageY - this.offset.click.top > containment[ 3 ] ) {\n                        pageY = containment[ 3 ] + this.offset.click.top;\n                    }\n                }\n\n                if ( o.grid ) {\n\n                    //Check for grid elements set to 0 to prevent divide by 0 error causing invalid\n                    // argument errors in IE (see ticket #6950)\n                    top = o.grid[ 1 ] ? this.originalPageY + Math.round( ( pageY -\n                        this.originalPageY ) / o.grid[ 1 ] ) * o.grid[ 1 ] : this.originalPageY;\n                    pageY = containment ? ( ( top - this.offset.click.top >= containment[ 1 ] ||\n                        top - this.offset.click.top > containment[ 3 ] ) ?\n                        top :\n                        ( ( top - this.offset.click.top >= containment[ 1 ] ) ?\n                            top - o.grid[ 1 ] : top + o.grid[ 1 ] ) ) : top;\n\n                    left = o.grid[ 0 ] ? this.originalPageX +\n                        Math.round( ( pageX - this.originalPageX ) / o.grid[ 0 ] ) * o.grid[ 0 ] :\n                        this.originalPageX;\n                    pageX = containment ? ( ( left - this.offset.click.left >= containment[ 0 ] ||\n                        left - this.offset.click.left > containment[ 2 ] ) ?\n                        left :\n                        ( ( left - this.offset.click.left >= containment[ 0 ] ) ?\n                            left - o.grid[ 0 ] : left + o.grid[ 0 ] ) ) : left;\n                }\n\n                if ( o.axis === \"y\" ) {\n                    pageX = this.originalPageX;\n                }\n\n                if ( o.axis === \"x\" ) {\n                    pageY = this.originalPageY;\n                }\n            }\n\n            return {\n                top: (\n\n                    // The absolute mouse position\n                    pageY -\n\n                    // Click offset (relative to the element)\n                    this.offset.click.top -\n\n                    // Only for relative positioned nodes: Relative offset from element to offset parent\n                    this.offset.relative.top -\n\n                    // The offsetParent's offset without borders (offset + border)\n                    this.offset.parent.top +\n                    ( this.cssPosition === \"fixed\" ?\n                        -this.offset.scroll.top :\n                        ( scrollIsRootNode ? 0 : this.offset.scroll.top ) )\n                ),\n                left: (\n\n                    // The absolute mouse position\n                    pageX -\n\n                    // Click offset (relative to the element)\n                    this.offset.click.left -\n\n                    // Only for relative positioned nodes: Relative offset from element to offset parent\n                    this.offset.relative.left -\n\n                    // The offsetParent's offset without borders (offset + border)\n                    this.offset.parent.left +\n                    ( this.cssPosition === \"fixed\" ?\n                        -this.offset.scroll.left :\n                        ( scrollIsRootNode ? 0 : this.offset.scroll.left ) )\n                )\n            };\n\n        },\n\n        _clear: function() {\n            this._removeClass( this.helper, \"ui-draggable-dragging\" );\n            if ( this.helper[ 0 ] !== this.element[ 0 ] && !this.cancelHelperRemoval ) {\n                this.helper.remove();\n            }\n            this.helper = null;\n            this.cancelHelperRemoval = false;\n            if ( this.destroyOnClear ) {\n                this.destroy();\n            }\n        },\n\n        // From now on bulk stuff - mainly helpers\n\n        _trigger: function( type, event, ui ) {\n            ui = ui || this._uiHash();\n            $.ui.plugin.call( this, type, [ event, ui, this ], true );\n\n            // Absolute position and offset (see #6884 ) have to be recalculated after plugins\n            if ( /^(drag|start|stop)/.test( type ) ) {\n                this.positionAbs = this._convertPositionTo( \"absolute\" );\n                ui.offset = this.positionAbs;\n            }\n            return $.Widget.prototype._trigger.call( this, type, event, ui );\n        },\n\n        plugins: {},\n\n        _uiHash: function() {\n            return {\n                helper: this.helper,\n                position: this.position,\n                originalPosition: this.originalPosition,\n                offset: this.positionAbs\n            };\n        }\n\n    } );\n\n    $.ui.plugin.add( \"draggable\", \"connectToSortable\", {\n        start: function( event, ui, draggable ) {\n            var uiSortable = $.extend( {}, ui, {\n                item: draggable.element\n            } );\n\n            draggable.sortables = [];\n            $( draggable.options.connectToSortable ).each( function() {\n                var sortable = $( this ).sortable( \"instance\" );\n\n                if ( sortable && !sortable.options.disabled ) {\n                    draggable.sortables.push( sortable );\n\n                    // RefreshPositions is called at drag start to refresh the containerCache\n                    // which is used in drag. This ensures it's initialized and synchronized\n                    // with any changes that might have happened on the page since initialization.\n                    sortable.refreshPositions();\n                    sortable._trigger( \"activate\", event, uiSortable );\n                }\n            } );\n        },\n        stop: function( event, ui, draggable ) {\n            var uiSortable = $.extend( {}, ui, {\n                item: draggable.element\n            } );\n\n            draggable.cancelHelperRemoval = false;\n\n            $.each( draggable.sortables, function() {\n                var sortable = this;\n\n                if ( sortable.isOver ) {\n                    sortable.isOver = 0;\n\n                    // Allow this sortable to handle removing the helper\n                    draggable.cancelHelperRemoval = true;\n                    sortable.cancelHelperRemoval = false;\n\n                    // Use _storedCSS To restore properties in the sortable,\n                    // as this also handles revert (#9675) since the draggable\n                    // may have modified them in unexpected ways (#8809)\n                    sortable._storedCSS = {\n                        position: sortable.placeholder.css( \"position\" ),\n                        top: sortable.placeholder.css( \"top\" ),\n                        left: sortable.placeholder.css( \"left\" )\n                    };\n\n                    sortable._mouseStop( event );\n\n                    // Once drag has ended, the sortable should return to using\n                    // its original helper, not the shared helper from draggable\n                    sortable.options.helper = sortable.options._helper;\n                } else {\n\n                    // Prevent this Sortable from removing the helper.\n                    // However, don't set the draggable to remove the helper\n                    // either as another connected Sortable may yet handle the removal.\n                    sortable.cancelHelperRemoval = true;\n\n                    sortable._trigger( \"deactivate\", event, uiSortable );\n                }\n            } );\n        },\n        drag: function( event, ui, draggable ) {\n            $.each( draggable.sortables, function() {\n                var innermostIntersecting = false,\n                    sortable = this;\n\n                // Copy over variables that sortable's _intersectsWith uses\n                sortable.positionAbs = draggable.positionAbs;\n                sortable.helperProportions = draggable.helperProportions;\n                sortable.offset.click = draggable.offset.click;\n\n                if ( sortable._intersectsWith( sortable.containerCache ) ) {\n                    innermostIntersecting = true;\n\n                    $.each( draggable.sortables, function() {\n\n                        // Copy over variables that sortable's _intersectsWith uses\n                        this.positionAbs = draggable.positionAbs;\n                        this.helperProportions = draggable.helperProportions;\n                        this.offset.click = draggable.offset.click;\n\n                        if ( this !== sortable &&\n                            this._intersectsWith( this.containerCache ) &&\n                            $.contains( sortable.element[ 0 ], this.element[ 0 ] ) ) {\n                            innermostIntersecting = false;\n                        }\n\n                        return innermostIntersecting;\n                    } );\n                }\n\n                if ( innermostIntersecting ) {\n\n                    // If it intersects, we use a little isOver variable and set it once,\n                    // so that the move-in stuff gets fired only once.\n                    if ( !sortable.isOver ) {\n                        sortable.isOver = 1;\n\n                        // Store draggable's parent in case we need to reappend to it later.\n                        draggable._parent = ui.helper.parent();\n\n                        sortable.currentItem = ui.helper\n                            .appendTo( sortable.element )\n                            .data( \"ui-sortable-item\", true );\n\n                        // Store helper option to later restore it\n                        sortable.options._helper = sortable.options.helper;\n\n                        sortable.options.helper = function() {\n                            return ui.helper[ 0 ];\n                        };\n\n                        // Fire the start events of the sortable with our passed browser event,\n                        // and our own helper (so it doesn't create a new one)\n                        event.target = sortable.currentItem[ 0 ];\n                        sortable._mouseCapture( event, true );\n                        sortable._mouseStart( event, true, true );\n\n                        // Because the browser event is way off the new appended portlet,\n                        // modify necessary variables to reflect the changes\n                        sortable.offset.click.top = draggable.offset.click.top;\n                        sortable.offset.click.left = draggable.offset.click.left;\n                        sortable.offset.parent.left -= draggable.offset.parent.left -\n                            sortable.offset.parent.left;\n                        sortable.offset.parent.top -= draggable.offset.parent.top -\n                            sortable.offset.parent.top;\n\n                        draggable._trigger( \"toSortable\", event );\n\n                        // Inform draggable that the helper is in a valid drop zone,\n                        // used solely in the revert option to handle \"valid/invalid\".\n                        draggable.dropped = sortable.element;\n\n                        // Need to refreshPositions of all sortables in the case that\n                        // adding to one sortable changes the location of the other sortables (#9675)\n                        $.each( draggable.sortables, function() {\n                            this.refreshPositions();\n                        } );\n\n                        // Hack so receive/update callbacks work (mostly)\n                        draggable.currentItem = draggable.element;\n                        sortable.fromOutside = draggable;\n                    }\n\n                    if ( sortable.currentItem ) {\n                        sortable._mouseDrag( event );\n\n                        // Copy the sortable's position because the draggable's can potentially reflect\n                        // a relative position, while sortable is always absolute, which the dragged\n                        // element has now become. (#8809)\n                        ui.position = sortable.position;\n                    }\n                } else {\n\n                    // If it doesn't intersect with the sortable, and it intersected before,\n                    // we fake the drag stop of the sortable, but make sure it doesn't remove\n                    // the helper by using cancelHelperRemoval.\n                    if ( sortable.isOver ) {\n\n                        sortable.isOver = 0;\n                        sortable.cancelHelperRemoval = true;\n\n                        // Calling sortable's mouseStop would trigger a revert,\n                        // so revert must be temporarily false until after mouseStop is called.\n                        sortable.options._revert = sortable.options.revert;\n                        sortable.options.revert = false;\n\n                        sortable._trigger( \"out\", event, sortable._uiHash( sortable ) );\n                        sortable._mouseStop( event, true );\n\n                        // Restore sortable behaviors that were modfied\n                        // when the draggable entered the sortable area (#9481)\n                        sortable.options.revert = sortable.options._revert;\n                        sortable.options.helper = sortable.options._helper;\n\n                        if ( sortable.placeholder ) {\n                            sortable.placeholder.remove();\n                        }\n\n                        // Restore and recalculate the draggable's offset considering the sortable\n                        // may have modified them in unexpected ways. (#8809, #10669)\n                        ui.helper.appendTo( draggable._parent );\n                        draggable._refreshOffsets( event );\n                        ui.position = draggable._generatePosition( event, true );\n\n                        draggable._trigger( \"fromSortable\", event );\n\n                        // Inform draggable that the helper is no longer in a valid drop zone\n                        draggable.dropped = false;\n\n                        // Need to refreshPositions of all sortables just in case removing\n                        // from one sortable changes the location of other sortables (#9675)\n                        $.each( draggable.sortables, function() {\n                            this.refreshPositions();\n                        } );\n                    }\n                }\n            } );\n        }\n    } );\n\n    $.ui.plugin.add( \"draggable\", \"cursor\", {\n        start: function( event, ui, instance ) {\n            var t = $( \"body\" ),\n                o = instance.options;\n\n            if ( t.css( \"cursor\" ) ) {\n                o._cursor = t.css( \"cursor\" );\n            }\n            t.css( \"cursor\", o.cursor );\n        },\n        stop: function( event, ui, instance ) {\n            var o = instance.options;\n            if ( o._cursor ) {\n                $( \"body\" ).css( \"cursor\", o._cursor );\n            }\n        }\n    } );\n\n    $.ui.plugin.add( \"draggable\", \"opacity\", {\n        start: function( event, ui, instance ) {\n            var t = $( ui.helper ),\n                o = instance.options;\n            if ( t.css( \"opacity\" ) ) {\n                o._opacity = t.css( \"opacity\" );\n            }\n            t.css( \"opacity\", o.opacity );\n        },\n        stop: function( event, ui, instance ) {\n            var o = instance.options;\n            if ( o._opacity ) {\n                $( ui.helper ).css( \"opacity\", o._opacity );\n            }\n        }\n    } );\n\n    $.ui.plugin.add( \"draggable\", \"scroll\", {\n        start: function( event, ui, i ) {\n            if ( !i.scrollParentNotHidden ) {\n                i.scrollParentNotHidden = i.helper.scrollParent( false );\n            }\n\n            if ( i.scrollParentNotHidden[ 0 ] !== i.document[ 0 ] &&\n                i.scrollParentNotHidden[ 0 ].tagName !== \"HTML\" ) {\n                i.overflowOffset = i.scrollParentNotHidden.offset();\n            }\n        },\n        drag: function( event, ui, i  ) {\n\n            var o = i.options,\n                scrolled = false,\n                scrollParent = i.scrollParentNotHidden[ 0 ],\n                document = i.document[ 0 ];\n\n            if ( scrollParent !== document && scrollParent.tagName !== \"HTML\" ) {\n                if ( !o.axis || o.axis !== \"x\" ) {\n                    if ( ( i.overflowOffset.top + scrollParent.offsetHeight ) - event.pageY <\n                        o.scrollSensitivity ) {\n                        scrollParent.scrollTop = scrolled = scrollParent.scrollTop + o.scrollSpeed;\n                    } else if ( event.pageY - i.overflowOffset.top < o.scrollSensitivity ) {\n                        scrollParent.scrollTop = scrolled = scrollParent.scrollTop - o.scrollSpeed;\n                    }\n                }\n\n                if ( !o.axis || o.axis !== \"y\" ) {\n                    if ( ( i.overflowOffset.left + scrollParent.offsetWidth ) - event.pageX <\n                        o.scrollSensitivity ) {\n                        scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft + o.scrollSpeed;\n                    } else if ( event.pageX - i.overflowOffset.left < o.scrollSensitivity ) {\n                        scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft - o.scrollSpeed;\n                    }\n                }\n\n            } else {\n\n                if ( !o.axis || o.axis !== \"x\" ) {\n                    if ( event.pageY - $( document ).scrollTop() < o.scrollSensitivity ) {\n                        scrolled = $( document ).scrollTop( $( document ).scrollTop() - o.scrollSpeed );\n                    } else if ( $( window ).height() - ( event.pageY - $( document ).scrollTop() ) <\n                        o.scrollSensitivity ) {\n                        scrolled = $( document ).scrollTop( $( document ).scrollTop() + o.scrollSpeed );\n                    }\n                }\n\n                if ( !o.axis || o.axis !== \"y\" ) {\n                    if ( event.pageX - $( document ).scrollLeft() < o.scrollSensitivity ) {\n                        scrolled = $( document ).scrollLeft(\n                            $( document ).scrollLeft() - o.scrollSpeed\n                        );\n                    } else if ( $( window ).width() - ( event.pageX - $( document ).scrollLeft() ) <\n                        o.scrollSensitivity ) {\n                        scrolled = $( document ).scrollLeft(\n                            $( document ).scrollLeft() + o.scrollSpeed\n                        );\n                    }\n                }\n\n            }\n\n            if ( scrolled !== false && $.ui.ddmanager && !o.dropBehaviour ) {\n                $.ui.ddmanager.prepareOffsets( i, event );\n            }\n\n        }\n    } );\n\n    $.ui.plugin.add( \"draggable\", \"snap\", {\n        start: function( event, ui, i ) {\n\n            var o = i.options;\n\n            i.snapElements = [];\n\n            $( o.snap.constructor !== String ? ( o.snap.items || \":data(ui-draggable)\" ) : o.snap )\n                .each( function() {\n                    var $t = $( this ),\n                        $o = $t.offset();\n                    if ( this !== i.element[ 0 ] ) {\n                        i.snapElements.push( {\n                            item: this,\n                            width: $t.outerWidth(), height: $t.outerHeight(),\n                            top: $o.top, left: $o.left\n                        } );\n                    }\n                } );\n\n        },\n        drag: function( event, ui, inst ) {\n\n            var ts, bs, ls, rs, l, r, t, b, i, first,\n                o = inst.options,\n                d = o.snapTolerance,\n                x1 = ui.offset.left, x2 = x1 + inst.helperProportions.width,\n                y1 = ui.offset.top, y2 = y1 + inst.helperProportions.height;\n\n            for ( i = inst.snapElements.length - 1; i >= 0; i-- ) {\n\n                l = inst.snapElements[ i ].left - inst.margins.left;\n                r = l + inst.snapElements[ i ].width;\n                t = inst.snapElements[ i ].top - inst.margins.top;\n                b = t + inst.snapElements[ i ].height;\n\n                if ( x2 < l - d || x1 > r + d || y2 < t - d || y1 > b + d ||\n                    !$.contains( inst.snapElements[ i ].item.ownerDocument,\n                        inst.snapElements[ i ].item ) ) {\n                    if ( inst.snapElements[ i ].snapping ) {\n                        if ( inst.options.snap.release ) {\n                            inst.options.snap.release.call(\n                                inst.element,\n                                event,\n                                $.extend( inst._uiHash(), { snapItem: inst.snapElements[ i ].item } )\n                            );\n                        }\n                    }\n                    inst.snapElements[ i ].snapping = false;\n                    continue;\n                }\n\n                if ( o.snapMode !== \"inner\" ) {\n                    ts = Math.abs( t - y2 ) <= d;\n                    bs = Math.abs( b - y1 ) <= d;\n                    ls = Math.abs( l - x2 ) <= d;\n                    rs = Math.abs( r - x1 ) <= d;\n                    if ( ts ) {\n                        ui.position.top = inst._convertPositionTo( \"relative\", {\n                            top: t - inst.helperProportions.height,\n                            left: 0\n                        } ).top;\n                    }\n                    if ( bs ) {\n                        ui.position.top = inst._convertPositionTo( \"relative\", {\n                            top: b,\n                            left: 0\n                        } ).top;\n                    }\n                    if ( ls ) {\n                        ui.position.left = inst._convertPositionTo( \"relative\", {\n                            top: 0,\n                            left: l - inst.helperProportions.width\n                        } ).left;\n                    }\n                    if ( rs ) {\n                        ui.position.left = inst._convertPositionTo( \"relative\", {\n                            top: 0,\n                            left: r\n                        } ).left;\n                    }\n                }\n\n                first = ( ts || bs || ls || rs );\n\n                if ( o.snapMode !== \"outer\" ) {\n                    ts = Math.abs( t - y1 ) <= d;\n                    bs = Math.abs( b - y2 ) <= d;\n                    ls = Math.abs( l - x1 ) <= d;\n                    rs = Math.abs( r - x2 ) <= d;\n                    if ( ts ) {\n                        ui.position.top = inst._convertPositionTo( \"relative\", {\n                            top: t,\n                            left: 0\n                        } ).top;\n                    }\n                    if ( bs ) {\n                        ui.position.top = inst._convertPositionTo( \"relative\", {\n                            top: b - inst.helperProportions.height,\n                            left: 0\n                        } ).top;\n                    }\n                    if ( ls ) {\n                        ui.position.left = inst._convertPositionTo( \"relative\", {\n                            top: 0,\n                            left: l\n                        } ).left;\n                    }\n                    if ( rs ) {\n                        ui.position.left = inst._convertPositionTo( \"relative\", {\n                            top: 0,\n                            left: r - inst.helperProportions.width\n                        } ).left;\n                    }\n                }\n\n                if ( !inst.snapElements[ i ].snapping && ( ts || bs || ls || rs || first ) ) {\n                    if ( inst.options.snap.snap ) {\n                        inst.options.snap.snap.call(\n                            inst.element,\n                            event,\n                            $.extend( inst._uiHash(), {\n                                snapItem: inst.snapElements[ i ].item\n                            } ) );\n                    }\n                }\n                inst.snapElements[ i ].snapping = ( ts || bs || ls || rs || first );\n\n            }\n\n        }\n    } );\n\n    $.ui.plugin.add( \"draggable\", \"stack\", {\n        start: function( event, ui, instance ) {\n            var min,\n                o = instance.options,\n                group = $.makeArray( $( o.stack ) ).sort( function( a, b ) {\n                    return ( parseInt( $( a ).css( \"zIndex\" ), 10 ) || 0 ) -\n                        ( parseInt( $( b ).css( \"zIndex\" ), 10 ) || 0 );\n                } );\n\n            if ( !group.length ) {\n                return;\n            }\n\n            min = parseInt( $( group[ 0 ] ).css( \"zIndex\" ), 10 ) || 0;\n            $( group ).each( function( i ) {\n                $( this ).css( \"zIndex\", min + i );\n            } );\n            this.css( \"zIndex\", ( min + group.length ) );\n        }\n    } );\n\n    $.ui.plugin.add( \"draggable\", \"zIndex\", {\n        start: function( event, ui, instance ) {\n            var t = $( ui.helper ),\n                o = instance.options;\n\n            if ( t.css( \"zIndex\" ) ) {\n                o._zIndex = t.css( \"zIndex\" );\n            }\n            t.css( \"zIndex\", o.zIndex );\n        },\n        stop: function( event, ui, instance ) {\n            var o = instance.options;\n\n            if ( o._zIndex ) {\n                $( ui.helper ).css( \"zIndex\", o._zIndex );\n            }\n        }\n    } );\n\n    return $.ui.draggable;\n\n} );\n","jquery/ui-modules/widgets/mouse.js":"/*!\n * jQuery UI Mouse 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Mouse\n//>>group: Widgets\n//>>description: Abstracts mouse-based interactions to assist in creating certain widgets.\n//>>docs: http://api.jqueryui.com/mouse/\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n            \"../ie\",\n            \"../version\",\n            \"../widget\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    var mouseHandled = false;\n    $( document ).on( \"mouseup\", function() {\n        mouseHandled = false;\n    } );\n\n    return $.widget( \"ui.mouse\", {\n        version: \"1.13.2\",\n        options: {\n            cancel: \"input, textarea, button, select, option\",\n            distance: 1,\n            delay: 0\n        },\n        _mouseInit: function() {\n            var that = this;\n\n            this.element\n                .on( \"mousedown.\" + this.widgetName, function( event ) {\n                    return that._mouseDown( event );\n                } )\n                .on( \"click.\" + this.widgetName, function( event ) {\n                    if ( true === $.data( event.target, that.widgetName + \".preventClickEvent\" ) ) {\n                        $.removeData( event.target, that.widgetName + \".preventClickEvent\" );\n                        event.stopImmediatePropagation();\n                        return false;\n                    }\n                } );\n\n            this.started = false;\n        },\n\n        // TODO: make sure destroying one instance of mouse doesn't mess with\n        // other instances of mouse\n        _mouseDestroy: function() {\n            this.element.off( \".\" + this.widgetName );\n            if ( this._mouseMoveDelegate ) {\n                this.document\n                    .off( \"mousemove.\" + this.widgetName, this._mouseMoveDelegate )\n                    .off( \"mouseup.\" + this.widgetName, this._mouseUpDelegate );\n            }\n        },\n\n        _mouseDown: function( event ) {\n\n            // don't let more than one widget handle mouseStart\n            if ( mouseHandled ) {\n                return;\n            }\n\n            this._mouseMoved = false;\n\n            // We may have missed mouseup (out of window)\n            if ( this._mouseStarted ) {\n                this._mouseUp( event );\n            }\n\n            this._mouseDownEvent = event;\n\n            var that = this,\n                btnIsLeft = ( event.which === 1 ),\n\n                // event.target.nodeName works around a bug in IE 8 with\n                // disabled inputs (#7620)\n                elIsCancel = ( typeof this.options.cancel === \"string\" && event.target.nodeName ?\n                    $( event.target ).closest( this.options.cancel ).length : false );\n            if ( !btnIsLeft || elIsCancel || !this._mouseCapture( event ) ) {\n                return true;\n            }\n\n            this.mouseDelayMet = !this.options.delay;\n            if ( !this.mouseDelayMet ) {\n                this._mouseDelayTimer = setTimeout( function() {\n                    that.mouseDelayMet = true;\n                }, this.options.delay );\n            }\n\n            if ( this._mouseDistanceMet( event ) && this._mouseDelayMet( event ) ) {\n                this._mouseStarted = ( this._mouseStart( event ) !== false );\n                if ( !this._mouseStarted ) {\n                    event.preventDefault();\n                    return true;\n                }\n            }\n\n            // Click event may never have fired (Gecko & Opera)\n            if ( true === $.data( event.target, this.widgetName + \".preventClickEvent\" ) ) {\n                $.removeData( event.target, this.widgetName + \".preventClickEvent\" );\n            }\n\n            // These delegates are required to keep context\n            this._mouseMoveDelegate = function( event ) {\n                return that._mouseMove( event );\n            };\n            this._mouseUpDelegate = function( event ) {\n                return that._mouseUp( event );\n            };\n\n            this.document\n                .on( \"mousemove.\" + this.widgetName, this._mouseMoveDelegate )\n                .on( \"mouseup.\" + this.widgetName, this._mouseUpDelegate );\n\n            event.preventDefault();\n\n            mouseHandled = true;\n            return true;\n        },\n\n        _mouseMove: function( event ) {\n\n            // Only check for mouseups outside the document if you've moved inside the document\n            // at least once. This prevents the firing of mouseup in the case of IE<9, which will\n            // fire a mousemove event if content is placed under the cursor. See #7778\n            // Support: IE <9\n            if ( this._mouseMoved ) {\n\n                // IE mouseup check - mouseup happened when mouse was out of window\n                if ( $.ui.ie && ( !document.documentMode || document.documentMode < 9 ) &&\n                    !event.button ) {\n                    return this._mouseUp( event );\n\n                    // Iframe mouseup check - mouseup occurred in another document\n                } else if ( !event.which ) {\n\n                    // Support: Safari <=8 - 9\n                    // Safari sets which to 0 if you press any of the following keys\n                    // during a drag (#14461)\n                    if ( event.originalEvent.altKey || event.originalEvent.ctrlKey ||\n                        event.originalEvent.metaKey || event.originalEvent.shiftKey ) {\n                        this.ignoreMissingWhich = true;\n                    } else if ( !this.ignoreMissingWhich ) {\n                        return this._mouseUp( event );\n                    }\n                }\n            }\n\n            if ( event.which || event.button ) {\n                this._mouseMoved = true;\n            }\n\n            if ( this._mouseStarted ) {\n                this._mouseDrag( event );\n                return event.preventDefault();\n            }\n\n            if ( this._mouseDistanceMet( event ) && this._mouseDelayMet( event ) ) {\n                this._mouseStarted =\n                    ( this._mouseStart( this._mouseDownEvent, event ) !== false );\n                if ( this._mouseStarted ) {\n                    this._mouseDrag( event );\n                } else {\n                    this._mouseUp( event );\n                }\n            }\n\n            return !this._mouseStarted;\n        },\n\n        _mouseUp: function( event ) {\n            this.document\n                .off( \"mousemove.\" + this.widgetName, this._mouseMoveDelegate )\n                .off( \"mouseup.\" + this.widgetName, this._mouseUpDelegate );\n\n            if ( this._mouseStarted ) {\n                this._mouseStarted = false;\n\n                if ( event.target === this._mouseDownEvent.target ) {\n                    $.data( event.target, this.widgetName + \".preventClickEvent\", true );\n                }\n\n                this._mouseStop( event );\n            }\n\n            if ( this._mouseDelayTimer ) {\n                clearTimeout( this._mouseDelayTimer );\n                delete this._mouseDelayTimer;\n            }\n\n            this.ignoreMissingWhich = false;\n            mouseHandled = false;\n            event.preventDefault();\n        },\n\n        _mouseDistanceMet: function( event ) {\n            return ( Math.max(\n                    Math.abs( this._mouseDownEvent.pageX - event.pageX ),\n                    Math.abs( this._mouseDownEvent.pageY - event.pageY )\n                ) >= this.options.distance\n            );\n        },\n\n        _mouseDelayMet: function( /* event */ ) {\n            return this.mouseDelayMet;\n        },\n\n        // These are placeholder methods, to be overriden by extending plugin\n        _mouseStart: function( /* event */ ) {},\n        _mouseDrag: function( /* event */ ) {},\n        _mouseStop: function( /* event */ ) {},\n        _mouseCapture: function( /* event */ ) {\n            return true;\n        }\n    } );\n\n} );\n","jquery/ui-modules/widgets/droppable.js":"/*!\n * jQuery UI Droppable 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Droppable\n//>>group: Interactions\n//>>description: Enables drop targets for draggable elements.\n//>>docs: http://api.jqueryui.com/droppable/\n//>>demos: http://jqueryui.com/droppable/\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n            \"./draggable\",\n            \"./mouse\",\n            \"../version\",\n            \"../widget\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    $.widget( \"ui.droppable\", {\n        version: \"1.13.2\",\n        widgetEventPrefix: \"drop\",\n        options: {\n            accept: \"*\",\n            addClasses: true,\n            greedy: false,\n            scope: \"default\",\n            tolerance: \"intersect\",\n\n            // Callbacks\n            activate: null,\n            deactivate: null,\n            drop: null,\n            out: null,\n            over: null\n        },\n        _create: function() {\n\n            var proportions,\n                o = this.options,\n                accept = o.accept;\n\n            this.isover = false;\n            this.isout = true;\n\n            this.accept = typeof accept === \"function\" ? accept : function( d ) {\n                return d.is( accept );\n            };\n\n            this.proportions = function( /* valueToWrite */ ) {\n                if ( arguments.length ) {\n\n                    // Store the droppable's proportions\n                    proportions = arguments[ 0 ];\n                } else {\n\n                    // Retrieve or derive the droppable's proportions\n                    return proportions ?\n                        proportions :\n                        proportions = {\n                            width: this.element[ 0 ].offsetWidth,\n                            height: this.element[ 0 ].offsetHeight\n                        };\n                }\n            };\n\n            this._addToManager( o.scope );\n\n            if ( o.addClasses ) {\n                this._addClass( \"ui-droppable\" );\n            }\n\n        },\n\n        _addToManager: function( scope ) {\n\n            // Add the reference and positions to the manager\n            $.ui.ddmanager.droppables[ scope ] = $.ui.ddmanager.droppables[ scope ] || [];\n            $.ui.ddmanager.droppables[ scope ].push( this );\n        },\n\n        _splice: function( drop ) {\n            var i = 0;\n            for ( ; i < drop.length; i++ ) {\n                if ( drop[ i ] === this ) {\n                    drop.splice( i, 1 );\n                }\n            }\n        },\n\n        _destroy: function() {\n            var drop = $.ui.ddmanager.droppables[ this.options.scope ];\n\n            this._splice( drop );\n        },\n\n        _setOption: function( key, value ) {\n\n            if ( key === \"accept\" ) {\n                this.accept = typeof value === \"function\" ? value : function( d ) {\n                    return d.is( value );\n                };\n            } else if ( key === \"scope\" ) {\n                var drop = $.ui.ddmanager.droppables[ this.options.scope ];\n\n                this._splice( drop );\n                this._addToManager( value );\n            }\n\n            this._super( key, value );\n        },\n\n        _activate: function( event ) {\n            var draggable = $.ui.ddmanager.current;\n\n            this._addActiveClass();\n            if ( draggable ) {\n                this._trigger( \"activate\", event, this.ui( draggable ) );\n            }\n        },\n\n        _deactivate: function( event ) {\n            var draggable = $.ui.ddmanager.current;\n\n            this._removeActiveClass();\n            if ( draggable ) {\n                this._trigger( \"deactivate\", event, this.ui( draggable ) );\n            }\n        },\n\n        _over: function( event ) {\n\n            var draggable = $.ui.ddmanager.current;\n\n            // Bail if draggable and droppable are same element\n            if ( !draggable || ( draggable.currentItem ||\n                draggable.element )[ 0 ] === this.element[ 0 ] ) {\n                return;\n            }\n\n            if ( this.accept.call( this.element[ 0 ], ( draggable.currentItem ||\n                draggable.element ) ) ) {\n                this._addHoverClass();\n                this._trigger( \"over\", event, this.ui( draggable ) );\n            }\n\n        },\n\n        _out: function( event ) {\n\n            var draggable = $.ui.ddmanager.current;\n\n            // Bail if draggable and droppable are same element\n            if ( !draggable || ( draggable.currentItem ||\n                draggable.element )[ 0 ] === this.element[ 0 ] ) {\n                return;\n            }\n\n            if ( this.accept.call( this.element[ 0 ], ( draggable.currentItem ||\n                draggable.element ) ) ) {\n                this._removeHoverClass();\n                this._trigger( \"out\", event, this.ui( draggable ) );\n            }\n\n        },\n\n        _drop: function( event, custom ) {\n\n            var draggable = custom || $.ui.ddmanager.current,\n                childrenIntersection = false;\n\n            // Bail if draggable and droppable are same element\n            if ( !draggable || ( draggable.currentItem ||\n                draggable.element )[ 0 ] === this.element[ 0 ] ) {\n                return false;\n            }\n\n            this.element\n                .find( \":data(ui-droppable)\" )\n                .not( \".ui-draggable-dragging\" )\n                .each( function() {\n                    var inst = $( this ).droppable( \"instance\" );\n                    if (\n                        inst.options.greedy &&\n                        !inst.options.disabled &&\n                        inst.options.scope === draggable.options.scope &&\n                        inst.accept.call(\n                            inst.element[ 0 ], ( draggable.currentItem || draggable.element )\n                        ) &&\n                        $.ui.intersect(\n                            draggable,\n                            $.extend( inst, { offset: inst.element.offset() } ),\n                            inst.options.tolerance, event\n                        )\n                    ) {\n                        childrenIntersection = true;\n                        return false;\n                    }\n                } );\n            if ( childrenIntersection ) {\n                return false;\n            }\n\n            if ( this.accept.call( this.element[ 0 ],\n                ( draggable.currentItem || draggable.element ) ) ) {\n                this._removeActiveClass();\n                this._removeHoverClass();\n\n                this._trigger( \"drop\", event, this.ui( draggable ) );\n                return this.element;\n            }\n\n            return false;\n\n        },\n\n        ui: function( c ) {\n            return {\n                draggable: ( c.currentItem || c.element ),\n                helper: c.helper,\n                position: c.position,\n                offset: c.positionAbs\n            };\n        },\n\n        // Extension points just to make backcompat sane and avoid duplicating logic\n        // TODO: Remove in 1.14 along with call to it below\n        _addHoverClass: function() {\n            this._addClass( \"ui-droppable-hover\" );\n        },\n\n        _removeHoverClass: function() {\n            this._removeClass( \"ui-droppable-hover\" );\n        },\n\n        _addActiveClass: function() {\n            this._addClass( \"ui-droppable-active\" );\n        },\n\n        _removeActiveClass: function() {\n            this._removeClass( \"ui-droppable-active\" );\n        }\n    } );\n\n    $.ui.intersect = ( function() {\n        function isOverAxis( x, reference, size ) {\n            return ( x >= reference ) && ( x < ( reference + size ) );\n        }\n\n        return function( draggable, droppable, toleranceMode, event ) {\n\n            if ( !droppable.offset ) {\n                return false;\n            }\n\n            var x1 = ( draggable.positionAbs ||\n                    draggable.position.absolute ).left + draggable.margins.left,\n                y1 = ( draggable.positionAbs ||\n                    draggable.position.absolute ).top + draggable.margins.top,\n                x2 = x1 + draggable.helperProportions.width,\n                y2 = y1 + draggable.helperProportions.height,\n                l = droppable.offset.left,\n                t = droppable.offset.top,\n                r = l + droppable.proportions().width,\n                b = t + droppable.proportions().height;\n\n            switch ( toleranceMode ) {\n                case \"fit\":\n                    return ( l <= x1 && x2 <= r && t <= y1 && y2 <= b );\n                case \"intersect\":\n                    return ( l < x1 + ( draggable.helperProportions.width / 2 ) && // Right Half\n                        x2 - ( draggable.helperProportions.width / 2 ) < r && // Left Half\n                        t < y1 + ( draggable.helperProportions.height / 2 ) && // Bottom Half\n                        y2 - ( draggable.helperProportions.height / 2 ) < b ); // Top Half\n                case \"pointer\":\n                    return isOverAxis( event.pageY, t, droppable.proportions().height ) &&\n                        isOverAxis( event.pageX, l, droppable.proportions().width );\n                case \"touch\":\n                    return (\n                        ( y1 >= t && y1 <= b ) || // Top edge touching\n                        ( y2 >= t && y2 <= b ) || // Bottom edge touching\n                        ( y1 < t && y2 > b ) // Surrounded vertically\n                    ) && (\n                        ( x1 >= l && x1 <= r ) || // Left edge touching\n                        ( x2 >= l && x2 <= r ) || // Right edge touching\n                        ( x1 < l && x2 > r ) // Surrounded horizontally\n                    );\n                default:\n                    return false;\n            }\n        };\n    } )();\n\n    /*\n        This manager tracks offsets of draggables and droppables\n    */\n    $.ui.ddmanager = {\n        current: null,\n        droppables: { \"default\": [] },\n        prepareOffsets: function( t, event ) {\n\n            var i, j,\n                m = $.ui.ddmanager.droppables[ t.options.scope ] || [],\n                type = event ? event.type : null, // workaround for #2317\n                list = ( t.currentItem || t.element ).find( \":data(ui-droppable)\" ).addBack();\n\n            droppablesLoop: for ( i = 0; i < m.length; i++ ) {\n\n                // No disabled and non-accepted\n                if ( m[ i ].options.disabled || ( t && !m[ i ].accept.call( m[ i ].element[ 0 ],\n                    ( t.currentItem || t.element ) ) ) ) {\n                    continue;\n                }\n\n                // Filter out elements in the current dragged item\n                for ( j = 0; j < list.length; j++ ) {\n                    if ( list[ j ] === m[ i ].element[ 0 ] ) {\n                        m[ i ].proportions().height = 0;\n                        continue droppablesLoop;\n                    }\n                }\n\n                m[ i ].visible = m[ i ].element.css( \"display\" ) !== \"none\";\n                if ( !m[ i ].visible ) {\n                    continue;\n                }\n\n                // Activate the droppable if used directly from draggables\n                if ( type === \"mousedown\" ) {\n                    m[ i ]._activate.call( m[ i ], event );\n                }\n\n                m[ i ].offset = m[ i ].element.offset();\n                m[ i ].proportions( {\n                    width: m[ i ].element[ 0 ].offsetWidth,\n                    height: m[ i ].element[ 0 ].offsetHeight\n                } );\n\n            }\n\n        },\n        drop: function( draggable, event ) {\n\n            var dropped = false;\n\n            // Create a copy of the droppables in case the list changes during the drop (#9116)\n            $.each( ( $.ui.ddmanager.droppables[ draggable.options.scope ] || [] ).slice(), function() {\n\n                if ( !this.options ) {\n                    return;\n                }\n                if ( !this.options.disabled && this.visible &&\n                    $.ui.intersect( draggable, this, this.options.tolerance, event ) ) {\n                    dropped = this._drop.call( this, event ) || dropped;\n                }\n\n                if ( !this.options.disabled && this.visible && this.accept.call( this.element[ 0 ],\n                    ( draggable.currentItem || draggable.element ) ) ) {\n                    this.isout = true;\n                    this.isover = false;\n                    this._deactivate.call( this, event );\n                }\n\n            } );\n            return dropped;\n\n        },\n        dragStart: function( draggable, event ) {\n\n            // Listen for scrolling so that if the dragging causes scrolling the position of the\n            // droppables can be recalculated (see #5003)\n            draggable.element.parentsUntil( \"body\" ).on( \"scroll.droppable\", function() {\n                if ( !draggable.options.refreshPositions ) {\n                    $.ui.ddmanager.prepareOffsets( draggable, event );\n                }\n            } );\n        },\n        drag: function( draggable, event ) {\n\n            // If you have a highly dynamic page, you might try this option. It renders positions\n            // every time you move the mouse.\n            if ( draggable.options.refreshPositions ) {\n                $.ui.ddmanager.prepareOffsets( draggable, event );\n            }\n\n            // Run through all droppables and check their positions based on specific tolerance options\n            $.each( $.ui.ddmanager.droppables[ draggable.options.scope ] || [], function() {\n\n                if ( this.options.disabled || this.greedyChild || !this.visible ) {\n                    return;\n                }\n\n                var parentInstance, scope, parent,\n                    intersects = $.ui.intersect( draggable, this, this.options.tolerance, event ),\n                    c = !intersects && this.isover ?\n                        \"isout\" :\n                        ( intersects && !this.isover ? \"isover\" : null );\n                if ( !c ) {\n                    return;\n                }\n\n                if ( this.options.greedy ) {\n\n                    // find droppable parents with same scope\n                    scope = this.options.scope;\n                    parent = this.element.parents( \":data(ui-droppable)\" ).filter( function() {\n                        return $( this ).droppable( \"instance\" ).options.scope === scope;\n                    } );\n\n                    if ( parent.length ) {\n                        parentInstance = $( parent[ 0 ] ).droppable( \"instance\" );\n                        parentInstance.greedyChild = ( c === \"isover\" );\n                    }\n                }\n\n                // We just moved into a greedy child\n                if ( parentInstance && c === \"isover\" ) {\n                    parentInstance.isover = false;\n                    parentInstance.isout = true;\n                    parentInstance._out.call( parentInstance, event );\n                }\n\n                this[ c ] = true;\n                this[ c === \"isout\" ? \"isover\" : \"isout\" ] = false;\n                this[ c === \"isover\" ? \"_over\" : \"_out\" ].call( this, event );\n\n                // We just moved out of a greedy child\n                if ( parentInstance && c === \"isout\" ) {\n                    parentInstance.isout = false;\n                    parentInstance.isover = true;\n                    parentInstance._over.call( parentInstance, event );\n                }\n            } );\n\n        },\n        dragStop: function( draggable, event ) {\n            draggable.element.parentsUntil( \"body\" ).off( \"scroll.droppable\" );\n\n            // Call prepareOffsets one final time since IE does not fire return scroll events when\n            // overflow was caused by drag (see #5003)\n            if ( !draggable.options.refreshPositions ) {\n                $.ui.ddmanager.prepareOffsets( draggable, event );\n            }\n        }\n    };\n\n// DEPRECATED\n// TODO: switch return back to widget declaration at top of file when this is removed\n    if ( $.uiBackCompat !== false ) {\n\n        // Backcompat for activeClass and hoverClass options\n        $.widget( \"ui.droppable\", $.ui.droppable, {\n            options: {\n                hoverClass: false,\n                activeClass: false\n            },\n            _addActiveClass: function() {\n                this._super();\n                if ( this.options.activeClass ) {\n                    this.element.addClass( this.options.activeClass );\n                }\n            },\n            _removeActiveClass: function() {\n                this._super();\n                if ( this.options.activeClass ) {\n                    this.element.removeClass( this.options.activeClass );\n                }\n            },\n            _addHoverClass: function() {\n                this._super();\n                if ( this.options.hoverClass ) {\n                    this.element.addClass( this.options.hoverClass );\n                }\n            },\n            _removeHoverClass: function() {\n                this._super();\n                if ( this.options.hoverClass ) {\n                    this.element.removeClass( this.options.hoverClass );\n                }\n            }\n        } );\n    }\n\n    return $.ui.droppable;\n\n} );\n","jquery/ui-modules/widgets/menu.js":"/*!\n * jQuery UI Menu 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Menu\n//>>group: Widgets\n//>>description: Creates nestable menus.\n//>>docs: http://api.jqueryui.com/menu/\n//>>demos: http://jqueryui.com/menu/\n//>>css.structure: ../../themes/base/core.css\n//>>css.structure: ../../themes/base/menu.css\n//>>css.theme: ../../themes/base/theme.css\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n            \"../keycode\",\n            \"../position\",\n            \"../safe-active-element\",\n            \"../unique-id\",\n            \"../version\",\n            \"../widget\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    return $.widget( \"ui.menu\", {\n        version: \"1.13.2\",\n        defaultElement: \"<ul>\",\n        delay: 300,\n        options: {\n            icons: {\n                submenu: \"ui-icon-caret-1-e\"\n            },\n            items: \"> *\",\n            menus: \"ul\",\n            position: {\n                my: \"left top\",\n                at: \"right top\"\n            },\n            role: \"menu\",\n\n            // Callbacks\n            blur: null,\n            focus: null,\n            select: null\n        },\n\n        _create: function() {\n            this.activeMenu = this.element;\n\n            // Flag used to prevent firing of the click handler\n            // as the event bubbles up through nested menus\n            this.mouseHandled = false;\n            this.lastMousePosition = { x: null, y: null };\n            this.element\n                .uniqueId()\n                .attr( {\n                    role: this.options.role,\n                    tabIndex: 0\n                } );\n\n            this._addClass( \"ui-menu\", \"ui-widget ui-widget-content\" );\n            this._on( {\n\n                // Prevent focus from sticking to links inside menu after clicking\n                // them (focus should always stay on UL during navigation).\n                \"mousedown .ui-menu-item\": function( event ) {\n                    event.preventDefault();\n\n                    this._activateItem( event );\n                },\n                \"click .ui-menu-item\": function( event ) {\n                    var target = $( event.target );\n                    var active = $( $.ui.safeActiveElement( this.document[ 0 ] ) );\n                    if ( !this.mouseHandled && target.not( \".ui-state-disabled\" ).length ) {\n                        this.select( event );\n\n                        // Only set the mouseHandled flag if the event will bubble, see #9469.\n                        if ( !event.isPropagationStopped() ) {\n                            this.mouseHandled = true;\n                        }\n\n                        // Open submenu on click\n                        if ( target.has( \".ui-menu\" ).length ) {\n                            this.expand( event );\n                        } else if ( !this.element.is( \":focus\" ) &&\n                            active.closest( \".ui-menu\" ).length ) {\n\n                            // Redirect focus to the menu\n                            this.element.trigger( \"focus\", [ true ] );\n\n                            // If the active item is on the top level, let it stay active.\n                            // Otherwise, blur the active item since it is no longer visible.\n                            if ( this.active && this.active.parents( \".ui-menu\" ).length === 1 ) {\n                                clearTimeout( this.timer );\n                            }\n                        }\n                    }\n                },\n                \"mouseenter .ui-menu-item\": \"_activateItem\",\n                \"mousemove .ui-menu-item\": \"_activateItem\",\n                mouseleave: \"collapseAll\",\n                \"mouseleave .ui-menu\": \"collapseAll\",\n                focus: function( event, keepActiveItem ) {\n\n                    // If there's already an active item, keep it active\n                    // If not, activate the first item\n                    var item = this.active || this._menuItems().first();\n\n                    if ( !keepActiveItem ) {\n                        this.focus( event, item );\n                    }\n                },\n                blur: function( event ) {\n                    this._delay( function() {\n                        var notContained = !$.contains(\n                            this.element[ 0 ],\n                            $.ui.safeActiveElement( this.document[ 0 ] )\n                        );\n                        if ( notContained ) {\n                            this.collapseAll( event );\n                        }\n                    } );\n                },\n                keydown: \"_keydown\"\n            } );\n\n            this.refresh();\n\n            // Clicks outside of a menu collapse any open menus\n            this._on( this.document, {\n                click: function( event ) {\n                    if ( this._closeOnDocumentClick( event ) ) {\n                        this.collapseAll( event, true );\n                    }\n\n                    // Reset the mouseHandled flag\n                    this.mouseHandled = false;\n                }\n            } );\n        },\n\n        _activateItem: function( event ) {\n\n            // Ignore mouse events while typeahead is active, see #10458.\n            // Prevents focusing the wrong item when typeahead causes a scroll while the mouse\n            // is over an item in the menu\n            if ( this.previousFilter ) {\n                return;\n            }\n\n            // If the mouse didn't actually move, but the page was scrolled, ignore the event (#9356)\n            if ( event.clientX === this.lastMousePosition.x &&\n                event.clientY === this.lastMousePosition.y ) {\n                return;\n            }\n\n            this.lastMousePosition = {\n                x: event.clientX,\n                y: event.clientY\n            };\n\n            var actualTarget = $( event.target ).closest( \".ui-menu-item\" ),\n                target = $( event.currentTarget );\n\n            // Ignore bubbled events on parent items, see #11641\n            if ( actualTarget[ 0 ] !== target[ 0 ] ) {\n                return;\n            }\n\n            // If the item is already active, there's nothing to do\n            if ( target.is( \".ui-state-active\" ) ) {\n                return;\n            }\n\n            // Remove ui-state-active class from siblings of the newly focused menu item\n            // to avoid a jump caused by adjacent elements both having a class with a border\n            this._removeClass( target.siblings().children( \".ui-state-active\" ),\n                null, \"ui-state-active\" );\n            this.focus( event, target );\n        },\n\n        _destroy: function() {\n            var items = this.element.find( \".ui-menu-item\" )\n                    .removeAttr( \"role aria-disabled\" ),\n                submenus = items.children( \".ui-menu-item-wrapper\" )\n                    .removeUniqueId()\n                    .removeAttr( \"tabIndex role aria-haspopup\" );\n\n            // Destroy (sub)menus\n            this.element\n                .removeAttr( \"aria-activedescendant\" )\n                .find( \".ui-menu\" ).addBack()\n                .removeAttr( \"role aria-labelledby aria-expanded aria-hidden aria-disabled \" +\n                    \"tabIndex\" )\n                .removeUniqueId()\n                .show();\n\n            submenus.children().each( function() {\n                var elem = $( this );\n                if ( elem.data( \"ui-menu-submenu-caret\" ) ) {\n                    elem.remove();\n                }\n            } );\n        },\n\n        _keydown: function( event ) {\n            var match, prev, character, skip,\n                preventDefault = true;\n\n            switch ( event.keyCode ) {\n                case $.ui.keyCode.PAGE_UP:\n                    this.previousPage( event );\n                    break;\n                case $.ui.keyCode.PAGE_DOWN:\n                    this.nextPage( event );\n                    break;\n                case $.ui.keyCode.HOME:\n                    this._move( \"first\", \"first\", event );\n                    break;\n                case $.ui.keyCode.END:\n                    this._move( \"last\", \"last\", event );\n                    break;\n                case $.ui.keyCode.UP:\n                    this.previous( event );\n                    break;\n                case $.ui.keyCode.DOWN:\n                    this.next( event );\n                    break;\n                case $.ui.keyCode.LEFT:\n                    this.collapse( event );\n                    break;\n                case $.ui.keyCode.RIGHT:\n                    if ( this.active && !this.active.is( \".ui-state-disabled\" ) ) {\n                        this.expand( event );\n                    }\n                    break;\n                case $.ui.keyCode.ENTER:\n                case $.ui.keyCode.SPACE:\n                    this._activate( event );\n                    break;\n                case $.ui.keyCode.ESCAPE:\n                    this.collapse( event );\n                    break;\n                default:\n                    preventDefault = false;\n                    prev = this.previousFilter || \"\";\n                    skip = false;\n\n                    // Support number pad values\n                    character = event.keyCode >= 96 && event.keyCode <= 105 ?\n                        ( event.keyCode - 96 ).toString() : String.fromCharCode( event.keyCode );\n\n                    clearTimeout( this.filterTimer );\n\n                    if ( character === prev ) {\n                        skip = true;\n                    } else {\n                        character = prev + character;\n                    }\n\n                    match = this._filterMenuItems( character );\n                    match = skip && match.index( this.active.next() ) !== -1 ?\n                        this.active.nextAll( \".ui-menu-item\" ) :\n                        match;\n\n                    // If no matches on the current filter, reset to the last character pressed\n                    // to move down the menu to the first item that starts with that character\n                    if ( !match.length ) {\n                        character = String.fromCharCode( event.keyCode );\n                        match = this._filterMenuItems( character );\n                    }\n\n                    if ( match.length ) {\n                        this.focus( event, match );\n                        this.previousFilter = character;\n                        this.filterTimer = this._delay( function() {\n                            delete this.previousFilter;\n                        }, 1000 );\n                    } else {\n                        delete this.previousFilter;\n                    }\n            }\n\n            if ( preventDefault ) {\n                event.preventDefault();\n            }\n        },\n\n        _activate: function( event ) {\n            if ( this.active && !this.active.is( \".ui-state-disabled\" ) ) {\n                if ( this.active.children( \"[aria-haspopup='true']\" ).length ) {\n                    this.expand( event );\n                } else {\n                    this.select( event );\n                }\n            }\n        },\n\n        refresh: function() {\n            var menus, items, newSubmenus, newItems, newWrappers,\n                that = this,\n                icon = this.options.icons.submenu,\n                submenus = this.element.find( this.options.menus );\n\n            this._toggleClass( \"ui-menu-icons\", null, !!this.element.find( \".ui-icon\" ).length );\n\n            // Initialize nested menus\n            newSubmenus = submenus.filter( \":not(.ui-menu)\" )\n                .hide()\n                .attr( {\n                    role: this.options.role,\n                    \"aria-hidden\": \"true\",\n                    \"aria-expanded\": \"false\"\n                } )\n                .each( function() {\n                    var menu = $( this ),\n                        item = menu.prev(),\n                        submenuCaret = $( \"<span>\" ).data( \"ui-menu-submenu-caret\", true );\n\n                    that._addClass( submenuCaret, \"ui-menu-icon\", \"ui-icon \" + icon );\n                    item\n                        .attr( \"aria-haspopup\", \"true\" )\n                        .prepend( submenuCaret );\n                    menu.attr( \"aria-labelledby\", item.attr( \"id\" ) );\n                } );\n\n            this._addClass( newSubmenus, \"ui-menu\", \"ui-widget ui-widget-content ui-front\" );\n\n            menus = submenus.add( this.element );\n            items = menus.find( this.options.items );\n\n            // Initialize menu-items containing spaces and/or dashes only as dividers\n            items.not( \".ui-menu-item\" ).each( function() {\n                var item = $( this );\n                if ( that._isDivider( item ) ) {\n                    that._addClass( item, \"ui-menu-divider\", \"ui-widget-content\" );\n                }\n            } );\n\n            // Don't refresh list items that are already adapted\n            newItems = items.not( \".ui-menu-item, .ui-menu-divider\" );\n            newWrappers = newItems.children()\n                .not( \".ui-menu\" )\n                .uniqueId()\n                .attr( {\n                    tabIndex: -1,\n                    role: this._itemRole()\n                } );\n            this._addClass( newItems, \"ui-menu-item\" )\n                ._addClass( newWrappers, \"ui-menu-item-wrapper\" );\n\n            // Add aria-disabled attribute to any disabled menu item\n            items.filter( \".ui-state-disabled\" ).attr( \"aria-disabled\", \"true\" );\n\n            // If the active item has been removed, blur the menu\n            if ( this.active && !$.contains( this.element[ 0 ], this.active[ 0 ] ) ) {\n                this.blur();\n            }\n        },\n\n        _itemRole: function() {\n            return {\n                menu: \"menuitem\",\n                listbox: \"option\"\n            }[ this.options.role ];\n        },\n\n        _setOption: function( key, value ) {\n            if ( key === \"icons\" ) {\n                var icons = this.element.find( \".ui-menu-icon\" );\n                this._removeClass( icons, null, this.options.icons.submenu )\n                    ._addClass( icons, null, value.submenu );\n            }\n            this._super( key, value );\n        },\n\n        _setOptionDisabled: function( value ) {\n            this._super( value );\n\n            this.element.attr( \"aria-disabled\", String( value ) );\n            this._toggleClass( null, \"ui-state-disabled\", !!value );\n        },\n\n        focus: function( event, item ) {\n            var nested, focused, activeParent;\n            this.blur( event, event && event.type === \"focus\" );\n\n            this._scrollIntoView( item );\n\n            this.active = item.first();\n\n            focused = this.active.children( \".ui-menu-item-wrapper\" );\n            this._addClass( focused, null, \"ui-state-active\" );\n\n            // Only update aria-activedescendant if there's a role\n            // otherwise we assume focus is managed elsewhere\n            if ( this.options.role ) {\n                this.element.attr( \"aria-activedescendant\", focused.attr( \"id\" ) );\n            }\n\n            // Highlight active parent menu item, if any\n            activeParent = this.active\n                .parent()\n                .closest( \".ui-menu-item\" )\n                .children( \".ui-menu-item-wrapper\" );\n            this._addClass( activeParent, null, \"ui-state-active\" );\n\n            if ( event && event.type === \"keydown\" ) {\n                this._close();\n            } else {\n                this.timer = this._delay( function() {\n                    this._close();\n                }, this.delay );\n            }\n\n            nested = item.children( \".ui-menu\" );\n            if ( nested.length && event && ( /^mouse/.test( event.type ) ) ) {\n                this._startOpening( nested );\n            }\n            this.activeMenu = item.parent();\n\n            this._trigger( \"focus\", event, { item: item } );\n        },\n\n        _scrollIntoView: function( item ) {\n            var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;\n            if ( this._hasScroll() ) {\n                borderTop = parseFloat( $.css( this.activeMenu[ 0 ], \"borderTopWidth\" ) ) || 0;\n                paddingTop = parseFloat( $.css( this.activeMenu[ 0 ], \"paddingTop\" ) ) || 0;\n                offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;\n                scroll = this.activeMenu.scrollTop();\n                elementHeight = this.activeMenu.height();\n                itemHeight = item.outerHeight();\n\n                if ( offset < 0 ) {\n                    this.activeMenu.scrollTop( scroll + offset );\n                } else if ( offset + itemHeight > elementHeight ) {\n                    this.activeMenu.scrollTop( scroll + offset - elementHeight + itemHeight );\n                }\n            }\n        },\n\n        blur: function( event, fromFocus ) {\n            if ( !fromFocus ) {\n                clearTimeout( this.timer );\n            }\n\n            if ( !this.active ) {\n                return;\n            }\n\n            this._removeClass( this.active.children( \".ui-menu-item-wrapper\" ),\n                null, \"ui-state-active\" );\n\n            this._trigger( \"blur\", event, { item: this.active } );\n            this.active = null;\n        },\n\n        _startOpening: function( submenu ) {\n            clearTimeout( this.timer );\n\n            // Don't open if already open fixes a Firefox bug that caused a .5 pixel\n            // shift in the submenu position when mousing over the caret icon\n            if ( submenu.attr( \"aria-hidden\" ) !== \"true\" ) {\n                return;\n            }\n\n            this.timer = this._delay( function() {\n                this._close();\n                this._open( submenu );\n            }, this.delay );\n        },\n\n        _open: function( submenu ) {\n            var position = $.extend( {\n                of: this.active\n            }, this.options.position );\n\n            clearTimeout( this.timer );\n            this.element.find( \".ui-menu\" ).not( submenu.parents( \".ui-menu\" ) )\n                .hide()\n                .attr( \"aria-hidden\", \"true\" );\n\n            submenu\n                .show()\n                .removeAttr( \"aria-hidden\" )\n                .attr( \"aria-expanded\", \"true\" )\n                .position( position );\n        },\n\n        collapseAll: function( event, all ) {\n            clearTimeout( this.timer );\n            this.timer = this._delay( function() {\n\n                // If we were passed an event, look for the submenu that contains the event\n                var currentMenu = all ? this.element :\n                    $( event && event.target ).closest( this.element.find( \".ui-menu\" ) );\n\n                // If we found no valid submenu ancestor, use the main menu to close all\n                // sub menus anyway\n                if ( !currentMenu.length ) {\n                    currentMenu = this.element;\n                }\n\n                this._close( currentMenu );\n\n                this.blur( event );\n\n                // Work around active item staying active after menu is blurred\n                this._removeClass( currentMenu.find( \".ui-state-active\" ), null, \"ui-state-active\" );\n\n                this.activeMenu = currentMenu;\n            }, all ? 0 : this.delay );\n        },\n\n        // With no arguments, closes the currently active menu - if nothing is active\n        // it closes all menus.  If passed an argument, it will search for menus BELOW\n        _close: function( startMenu ) {\n            if ( !startMenu ) {\n                startMenu = this.active ? this.active.parent() : this.element;\n            }\n\n            startMenu.find( \".ui-menu\" )\n                .hide()\n                .attr( \"aria-hidden\", \"true\" )\n                .attr( \"aria-expanded\", \"false\" );\n        },\n\n        _closeOnDocumentClick: function( event ) {\n            return !$( event.target ).closest( \".ui-menu\" ).length;\n        },\n\n        _isDivider: function( item ) {\n\n            // Match hyphen, em dash, en dash\n            return !/[^\\-\\u2014\\u2013\\s]/.test( item.text() );\n        },\n\n        collapse: function( event ) {\n            var newItem = this.active &&\n                this.active.parent().closest( \".ui-menu-item\", this.element );\n            if ( newItem && newItem.length ) {\n                this._close();\n                this.focus( event, newItem );\n            }\n        },\n\n        expand: function( event ) {\n            var newItem = this.active && this._menuItems( this.active.children( \".ui-menu\" ) ).first();\n\n            if ( newItem && newItem.length ) {\n                this._open( newItem.parent() );\n\n                // Delay so Firefox will not hide activedescendant change in expanding submenu from AT\n                this._delay( function() {\n                    this.focus( event, newItem );\n                } );\n            }\n        },\n\n        next: function( event ) {\n            this._move( \"next\", \"first\", event );\n        },\n\n        previous: function( event ) {\n            this._move( \"prev\", \"last\", event );\n        },\n\n        isFirstItem: function() {\n            return this.active && !this.active.prevAll( \".ui-menu-item\" ).length;\n        },\n\n        isLastItem: function() {\n            return this.active && !this.active.nextAll( \".ui-menu-item\" ).length;\n        },\n\n        _menuItems: function( menu ) {\n            return ( menu || this.element )\n                .find( this.options.items )\n                .filter( \".ui-menu-item\" );\n        },\n\n        _move: function( direction, filter, event ) {\n            var next;\n            if ( this.active ) {\n                if ( direction === \"first\" || direction === \"last\" ) {\n                    next = this.active\n                        [ direction === \"first\" ? \"prevAll\" : \"nextAll\" ]( \".ui-menu-item\" )\n                        .last();\n                } else {\n                    next = this.active\n                        [ direction + \"All\" ]( \".ui-menu-item\" )\n                        .first();\n                }\n            }\n            if ( !next || !next.length || !this.active ) {\n                next = this._menuItems( this.activeMenu )[ filter ]();\n            }\n\n            this.focus( event, next );\n        },\n\n        nextPage: function( event ) {\n            var item, base, height;\n\n            if ( !this.active ) {\n                this.next( event );\n                return;\n            }\n            if ( this.isLastItem() ) {\n                return;\n            }\n            if ( this._hasScroll() ) {\n                base = this.active.offset().top;\n                height = this.element.innerHeight();\n\n                // jQuery 3.2 doesn't include scrollbars in innerHeight, add it back.\n                if ( $.fn.jquery.indexOf( \"3.2.\" ) === 0 ) {\n                    height += this.element[ 0 ].offsetHeight - this.element.outerHeight();\n                }\n\n                this.active.nextAll( \".ui-menu-item\" ).each( function() {\n                    item = $( this );\n                    return item.offset().top - base - height < 0;\n                } );\n\n                this.focus( event, item );\n            } else {\n                this.focus( event, this._menuItems( this.activeMenu )\n                    [ !this.active ? \"first\" : \"last\" ]() );\n            }\n        },\n\n        previousPage: function( event ) {\n            var item, base, height;\n            if ( !this.active ) {\n                this.next( event );\n                return;\n            }\n            if ( this.isFirstItem() ) {\n                return;\n            }\n            if ( this._hasScroll() ) {\n                base = this.active.offset().top;\n                height = this.element.innerHeight();\n\n                // jQuery 3.2 doesn't include scrollbars in innerHeight, add it back.\n                if ( $.fn.jquery.indexOf( \"3.2.\" ) === 0 ) {\n                    height += this.element[ 0 ].offsetHeight - this.element.outerHeight();\n                }\n\n                this.active.prevAll( \".ui-menu-item\" ).each( function() {\n                    item = $( this );\n                    return item.offset().top - base + height > 0;\n                } );\n\n                this.focus( event, item );\n            } else {\n                this.focus( event, this._menuItems( this.activeMenu ).first() );\n            }\n        },\n\n        _hasScroll: function() {\n            return this.element.outerHeight() < this.element.prop( \"scrollHeight\" );\n        },\n\n        select: function( event ) {\n\n            // TODO: It should never be possible to not have an active item at this\n            // point, but the tests don't trigger mouseenter before click.\n            this.active = this.active || $( event.target ).closest( \".ui-menu-item\" );\n            var ui = { item: this.active };\n            if ( !this.active.has( \".ui-menu\" ).length ) {\n                this.collapseAll( event, true );\n            }\n            this._trigger( \"select\", event, ui );\n        },\n\n        _filterMenuItems: function( character ) {\n            var escapedCharacter = character.replace( /[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, \"\\\\$&\" ),\n                regex = new RegExp( \"^\" + escapedCharacter, \"i\" );\n\n            return this.activeMenu\n                .find( this.options.items )\n\n                // Only match on items, not dividers or other content (#10571)\n                .filter( \".ui-menu-item\" )\n                .filter( function() {\n                    return regex.test(\n                        String.prototype.trim.call(\n                            $( this ).children( \".ui-menu-item-wrapper\" ).text() ) );\n                } );\n        }\n    } );\n\n} );\n","jquery/ui-modules/widgets/datepicker.js":"/* eslint-disable max-len, camelcase */\n/*!\n * jQuery UI Datepicker 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Datepicker\n//>>group: Widgets\n//>>description: Displays a calendar from an input or inline for selecting dates.\n//>>docs: http://api.jqueryui.com/datepicker/\n//>>demos: http://jqueryui.com/datepicker/\n//>>css.structure: ../../themes/base/core.css\n//>>css.structure: ../../themes/base/datepicker.css\n//>>css.theme: ../../themes/base/theme.css\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n            \"../version\",\n            \"../keycode\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    $.extend( $.ui, { datepicker: { version: \"1.13.2\" } } );\n\n    var datepicker_instActive;\n\n    function datepicker_getZindex( elem ) {\n        var position, value;\n        while ( elem.length && elem[ 0 ] !== document ) {\n\n            // Ignore z-index if position is set to a value where z-index is ignored by the browser\n            // This makes behavior of this function consistent across browsers\n            // WebKit always returns auto if the element is positioned\n            position = elem.css( \"position\" );\n            if ( position === \"absolute\" || position === \"relative\" || position === \"fixed\" ) {\n\n                // IE returns 0 when zIndex is not specified\n                // other browsers return a string\n                // we ignore the case of nested elements with an explicit value of 0\n                // <div style=\"z-index: -10;\"><div style=\"z-index: 0;\"></div></div>\n                value = parseInt( elem.css( \"zIndex\" ), 10 );\n                if ( !isNaN( value ) && value !== 0 ) {\n                    return value;\n                }\n            }\n            elem = elem.parent();\n        }\n\n        return 0;\n    }\n\n    /* Date picker manager.\n       Use the singleton instance of this class, $.datepicker, to interact with the date picker.\n       Settings for (groups of) date pickers are maintained in an instance object,\n       allowing multiple different settings on the same page. */\n\n    function Datepicker() {\n        this._curInst = null; // The current instance in use\n        this._keyEvent = false; // If the last event was a key event\n        this._disabledInputs = []; // List of date picker inputs that have been disabled\n        this._datepickerShowing = false; // True if the popup picker is showing , false if not\n        this._inDialog = false; // True if showing within a \"dialog\", false if not\n        this._mainDivId = \"ui-datepicker-div\"; // The ID of the main datepicker division\n        this._inlineClass = \"ui-datepicker-inline\"; // The name of the inline marker class\n        this._appendClass = \"ui-datepicker-append\"; // The name of the append marker class\n        this._triggerClass = \"ui-datepicker-trigger\"; // The name of the trigger marker class\n        this._dialogClass = \"ui-datepicker-dialog\"; // The name of the dialog marker class\n        this._disableClass = \"ui-datepicker-disabled\"; // The name of the disabled covering marker class\n        this._unselectableClass = \"ui-datepicker-unselectable\"; // The name of the unselectable cell marker class\n        this._currentClass = \"ui-datepicker-current-day\"; // The name of the current day marker class\n        this._dayOverClass = \"ui-datepicker-days-cell-over\"; // The name of the day hover marker class\n        this.regional = []; // Available regional settings, indexed by language code\n        this.regional[ \"\" ] = { // Default regional settings\n            closeText: \"Done\", // Display text for close link\n            prevText: \"Prev\", // Display text for previous month link\n            nextText: \"Next\", // Display text for next month link\n            currentText: \"Today\", // Display text for current month link\n            monthNames: [ \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n                \"July\", \"August\", \"September\", \"October\", \"November\", \"December\" ], // Names of months for drop-down and formatting\n            monthNamesShort: [ \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\" ], // For formatting\n            dayNames: [ \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\" ], // For formatting\n            dayNamesShort: [ \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\" ], // For formatting\n            dayNamesMin: [ \"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\" ], // Column headings for days starting at Sunday\n            weekHeader: \"Wk\", // Column header for week of the year\n            dateFormat: \"mm/dd/yy\", // See format options on parseDate\n            firstDay: 0, // The first day of the week, Sun = 0, Mon = 1, ...\n            isRTL: false, // True if right-to-left language, false if left-to-right\n            showMonthAfterYear: false, // True if the year select precedes month, false for month then year\n            yearSuffix: \"\", // Additional text to append to the year in the month headers,\n            selectMonthLabel: \"Select month\", // Invisible label for month selector\n            selectYearLabel: \"Select year\" // Invisible label for year selector\n        };\n        this._defaults = { // Global defaults for all the date picker instances\n            showOn: \"focus\", // \"focus\" for popup on focus,\n            // \"button\" for trigger button, or \"both\" for either\n            showAnim: \"fadeIn\", // Name of jQuery animation for popup\n            showOptions: {}, // Options for enhanced animations\n            defaultDate: null, // Used when field is blank: actual date,\n            // +/-number for offset from today, null for today\n            appendText: \"\", // Display text following the input box, e.g. showing the format\n            buttonText: \"...\", // Text for trigger button\n            buttonImage: \"\", // URL for trigger button image\n            buttonImageOnly: false, // True if the image appears alone, false if it appears on a button\n            hideIfNoPrevNext: false, // True to hide next/previous month links\n            // if not applicable, false to just disable them\n            navigationAsDateFormat: false, // True if date formatting applied to prev/today/next links\n            gotoCurrent: false, // True if today link goes back to current selection instead\n            changeMonth: false, // True if month can be selected directly, false if only prev/next\n            changeYear: false, // True if year can be selected directly, false if only prev/next\n            yearRange: \"c-10:c+10\", // Range of years to display in drop-down,\n            // either relative to today's year (-nn:+nn), relative to currently displayed year\n            // (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)\n            showOtherMonths: false, // True to show dates in other months, false to leave blank\n            selectOtherMonths: false, // True to allow selection of dates in other months, false for unselectable\n            showWeek: false, // True to show week of the year, false to not show it\n            calculateWeek: this.iso8601Week, // How to calculate the week of the year,\n            // takes a Date and returns the number of the week for it\n            shortYearCutoff: \"+10\", // Short year values < this are in the current century,\n            // > this are in the previous century,\n            // string value starting with \"+\" for current year + value\n            minDate: null, // The earliest selectable date, or null for no limit\n            maxDate: null, // The latest selectable date, or null for no limit\n            duration: \"fast\", // Duration of display/closure\n            beforeShowDay: null, // Function that takes a date and returns an array with\n            // [0] = true if selectable, false if not, [1] = custom CSS class name(s) or \"\",\n            // [2] = cell title (optional), e.g. $.datepicker.noWeekends\n            beforeShow: null, // Function that takes an input field and\n            // returns a set of custom settings for the date picker\n            onSelect: null, // Define a callback function when a date is selected\n            onChangeMonthYear: null, // Define a callback function when the month or year is changed\n            onClose: null, // Define a callback function when the datepicker is closed\n            onUpdateDatepicker: null, // Define a callback function when the datepicker is updated\n            numberOfMonths: 1, // Number of months to show at a time\n            showCurrentAtPos: 0, // The position in multipe months at which to show the current month (starting at 0)\n            stepMonths: 1, // Number of months to step back/forward\n            stepBigMonths: 12, // Number of months to step back/forward for the big links\n            altField: \"\", // Selector for an alternate field to store selected dates into\n            altFormat: \"\", // The date format to use for the alternate field\n            constrainInput: true, // The input is constrained by the current date format\n            showButtonPanel: false, // True to show button panel, false to not show it\n            autoSize: false, // True to size the input for the date format, false to leave as is\n            disabled: false // The initial disabled state\n        };\n        $.extend( this._defaults, this.regional[ \"\" ] );\n        this.regional.en = $.extend( true, {}, this.regional[ \"\" ] );\n        this.regional[ \"en-US\" ] = $.extend( true, {}, this.regional.en );\n        this.dpDiv = datepicker_bindHover( $( \"<div id='\" + this._mainDivId + \"' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>\" ) );\n    }\n\n    $.extend( Datepicker.prototype, {\n\n        /* Class name added to elements to indicate already configured with a date picker. */\n        markerClassName: \"hasDatepicker\",\n\n        //Keep track of the maximum number of rows displayed (see #7043)\n        maxRows: 4,\n\n        // TODO rename to \"widget\" when switching to widget factory\n        _widgetDatepicker: function() {\n            return this.dpDiv;\n        },\n\n        /* Override the default settings for all instances of the date picker.\n         * @param  settings  object - the new settings to use as defaults (anonymous object)\n         * @return the manager object\n         */\n        setDefaults: function( settings ) {\n            datepicker_extendRemove( this._defaults, settings || {} );\n            return this;\n        },\n\n        /* Attach the date picker to a jQuery selection.\n         * @param  target\telement - the target input field or division or span\n         * @param  settings  object - the new settings to use for this date picker instance (anonymous)\n         */\n        _attachDatepicker: function( target, settings ) {\n            var nodeName, inline, inst;\n            nodeName = target.nodeName.toLowerCase();\n            inline = ( nodeName === \"div\" || nodeName === \"span\" );\n            if ( !target.id ) {\n                this.uuid += 1;\n                target.id = \"dp\" + this.uuid;\n            }\n            inst = this._newInst( $( target ), inline );\n            inst.settings = $.extend( {}, settings || {} );\n            if ( nodeName === \"input\" ) {\n                this._connectDatepicker( target, inst );\n            } else if ( inline ) {\n                this._inlineDatepicker( target, inst );\n            }\n        },\n\n        /* Create a new instance object. */\n        _newInst: function( target, inline ) {\n            var id = target[ 0 ].id.replace( /([^A-Za-z0-9_\\-])/g, \"\\\\\\\\$1\" ); // escape jQuery meta chars\n            return { id: id, input: target, // associated target\n                selectedDay: 0, selectedMonth: 0, selectedYear: 0, // current selection\n                drawMonth: 0, drawYear: 0, // month being drawn\n                inline: inline, // is datepicker inline or not\n                dpDiv: ( !inline ? this.dpDiv : // presentation div\n                    datepicker_bindHover( $( \"<div class='\" + this._inlineClass + \" ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>\" ) ) ) };\n        },\n\n        /* Attach the date picker to an input field. */\n        _connectDatepicker: function( target, inst ) {\n            var input = $( target );\n            inst.append = $( [] );\n            inst.trigger = $( [] );\n            if ( input.hasClass( this.markerClassName ) ) {\n                return;\n            }\n            this._attachments( input, inst );\n            input.addClass( this.markerClassName ).on( \"keydown\", this._doKeyDown ).\n            on( \"keypress\", this._doKeyPress ).on( \"keyup\", this._doKeyUp );\n            this._autoSize( inst );\n            $.data( target, \"datepicker\", inst );\n\n            //If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)\n            if ( inst.settings.disabled ) {\n                this._disableDatepicker( target );\n            }\n        },\n\n        /* Make attachments based on settings. */\n        _attachments: function( input, inst ) {\n            var showOn, buttonText, buttonImage,\n                appendText = this._get( inst, \"appendText\" ),\n                isRTL = this._get( inst, \"isRTL\" );\n\n            if ( inst.append ) {\n                inst.append.remove();\n            }\n            if ( appendText ) {\n                inst.append = $( \"<span>\" )\n                    .addClass( this._appendClass )\n                    .text( appendText );\n                input[ isRTL ? \"before\" : \"after\" ]( inst.append );\n            }\n\n            input.off( \"focus\", this._showDatepicker );\n\n            if ( inst.trigger ) {\n                inst.trigger.remove();\n            }\n\n            showOn = this._get( inst, \"showOn\" );\n            if ( showOn === \"focus\" || showOn === \"both\" ) { // pop-up date picker when in the marked field\n                input.on( \"focus\", this._showDatepicker );\n            }\n            if ( showOn === \"button\" || showOn === \"both\" ) { // pop-up date picker when button clicked\n                buttonText = this._get( inst, \"buttonText\" );\n                buttonImage = this._get( inst, \"buttonImage\" );\n\n                if ( this._get( inst, \"buttonImageOnly\" ) ) {\n                    inst.trigger = $( \"<img>\" )\n                        .addClass( this._triggerClass )\n                        .attr( {\n                            src: buttonImage,\n                            alt: buttonText,\n                            title: buttonText\n                        } );\n                } else {\n                    inst.trigger = $( \"<button type='button'>\" )\n                        .addClass( this._triggerClass );\n                    if ( buttonImage ) {\n                        inst.trigger.html(\n                            $( \"<img>\" )\n                                .attr( {\n                                    src: buttonImage,\n                                    alt: buttonText,\n                                    title: buttonText\n                                } )\n                        );\n                    } else {\n                        inst.trigger.text( buttonText );\n                    }\n                }\n\n                input[ isRTL ? \"before\" : \"after\" ]( inst.trigger );\n                inst.trigger.on( \"click\", function() {\n                    if ( $.datepicker._datepickerShowing && $.datepicker._lastInput === input[ 0 ] ) {\n                        $.datepicker._hideDatepicker();\n                    } else if ( $.datepicker._datepickerShowing && $.datepicker._lastInput !== input[ 0 ] ) {\n                        $.datepicker._hideDatepicker();\n                        $.datepicker._showDatepicker( input[ 0 ] );\n                    } else {\n                        $.datepicker._showDatepicker( input[ 0 ] );\n                    }\n                    return false;\n                } );\n            }\n        },\n\n        /* Apply the maximum length for the date format. */\n        _autoSize: function( inst ) {\n            if ( this._get( inst, \"autoSize\" ) && !inst.inline ) {\n                var findMax, max, maxI, i,\n                    date = new Date( 2009, 12 - 1, 20 ), // Ensure double digits\n                    dateFormat = this._get( inst, \"dateFormat\" );\n\n                if ( dateFormat.match( /[DM]/ ) ) {\n                    findMax = function( names ) {\n                        max = 0;\n                        maxI = 0;\n                        for ( i = 0; i < names.length; i++ ) {\n                            if ( names[ i ].length > max ) {\n                                max = names[ i ].length;\n                                maxI = i;\n                            }\n                        }\n                        return maxI;\n                    };\n                    date.setMonth( findMax( this._get( inst, ( dateFormat.match( /MM/ ) ?\n                        \"monthNames\" : \"monthNamesShort\" ) ) ) );\n                    date.setDate( findMax( this._get( inst, ( dateFormat.match( /DD/ ) ?\n                        \"dayNames\" : \"dayNamesShort\" ) ) ) + 20 - date.getDay() );\n                }\n                inst.input.attr( \"size\", this._formatDate( inst, date ).length );\n            }\n        },\n\n        /* Attach an inline date picker to a div. */\n        _inlineDatepicker: function( target, inst ) {\n            var divSpan = $( target );\n            if ( divSpan.hasClass( this.markerClassName ) ) {\n                return;\n            }\n            divSpan.addClass( this.markerClassName ).append( inst.dpDiv );\n            $.data( target, \"datepicker\", inst );\n            this._setDate( inst, this._getDefaultDate( inst ), true );\n            this._updateDatepicker( inst );\n            this._updateAlternate( inst );\n\n            //If disabled option is true, disable the datepicker before showing it (see ticket #5665)\n            if ( inst.settings.disabled ) {\n                this._disableDatepicker( target );\n            }\n\n            // Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements\n            // http://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height\n            inst.dpDiv.css( \"display\", \"block\" );\n        },\n\n        /* Pop-up the date picker in a \"dialog\" box.\n         * @param  input element - ignored\n         * @param  date\tstring or Date - the initial date to display\n         * @param  onSelect  function - the function to call when a date is selected\n         * @param  settings  object - update the dialog date picker instance's settings (anonymous object)\n         * @param  pos int[2] - coordinates for the dialog's position within the screen or\n         *\t\t\t\t\tevent - with x/y coordinates or\n         *\t\t\t\t\tleave empty for default (screen centre)\n         * @return the manager object\n         */\n        _dialogDatepicker: function( input, date, onSelect, settings, pos ) {\n            var id, browserWidth, browserHeight, scrollX, scrollY,\n                inst = this._dialogInst; // internal instance\n\n            if ( !inst ) {\n                this.uuid += 1;\n                id = \"dp\" + this.uuid;\n                this._dialogInput = $( \"<input type='text' id='\" + id +\n                    \"' style='position: absolute; top: -100px; width: 0px;'/>\" );\n                this._dialogInput.on( \"keydown\", this._doKeyDown );\n                $( \"body\" ).append( this._dialogInput );\n                inst = this._dialogInst = this._newInst( this._dialogInput, false );\n                inst.settings = {};\n                $.data( this._dialogInput[ 0 ], \"datepicker\", inst );\n            }\n            datepicker_extendRemove( inst.settings, settings || {} );\n            date = ( date && date.constructor === Date ? this._formatDate( inst, date ) : date );\n            this._dialogInput.val( date );\n\n            this._pos = ( pos ? ( pos.length ? pos : [ pos.pageX, pos.pageY ] ) : null );\n            if ( !this._pos ) {\n                browserWidth = document.documentElement.clientWidth;\n                browserHeight = document.documentElement.clientHeight;\n                scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;\n                scrollY = document.documentElement.scrollTop || document.body.scrollTop;\n                this._pos = // should use actual width/height below\n                    [ ( browserWidth / 2 ) - 100 + scrollX, ( browserHeight / 2 ) - 150 + scrollY ];\n            }\n\n            // Move input on screen for focus, but hidden behind dialog\n            this._dialogInput.css( \"left\", ( this._pos[ 0 ] + 20 ) + \"px\" ).css( \"top\", this._pos[ 1 ] + \"px\" );\n            inst.settings.onSelect = onSelect;\n            this._inDialog = true;\n            this.dpDiv.addClass( this._dialogClass );\n            this._showDatepicker( this._dialogInput[ 0 ] );\n            if ( $.blockUI ) {\n                $.blockUI( this.dpDiv );\n            }\n            $.data( this._dialogInput[ 0 ], \"datepicker\", inst );\n            return this;\n        },\n\n        /* Detach a datepicker from its control.\n         * @param  target\telement - the target input field or division or span\n         */\n        _destroyDatepicker: function( target ) {\n            var nodeName,\n                $target = $( target ),\n                inst = $.data( target, \"datepicker\" );\n\n            if ( !$target.hasClass( this.markerClassName ) ) {\n                return;\n            }\n\n            nodeName = target.nodeName.toLowerCase();\n            $.removeData( target, \"datepicker\" );\n            if ( nodeName === \"input\" ) {\n                inst.append.remove();\n                inst.trigger.remove();\n                $target.removeClass( this.markerClassName ).\n                off( \"focus\", this._showDatepicker ).\n                off( \"keydown\", this._doKeyDown ).\n                off( \"keypress\", this._doKeyPress ).\n                off( \"keyup\", this._doKeyUp );\n            } else if ( nodeName === \"div\" || nodeName === \"span\" ) {\n                $target.removeClass( this.markerClassName ).empty();\n            }\n\n            if ( datepicker_instActive === inst ) {\n                datepicker_instActive = null;\n                this._curInst = null;\n            }\n        },\n\n        /* Enable the date picker to a jQuery selection.\n         * @param  target\telement - the target input field or division or span\n         */\n        _enableDatepicker: function( target ) {\n            var nodeName, inline,\n                $target = $( target ),\n                inst = $.data( target, \"datepicker\" );\n\n            if ( !$target.hasClass( this.markerClassName ) ) {\n                return;\n            }\n\n            nodeName = target.nodeName.toLowerCase();\n            if ( nodeName === \"input\" ) {\n                target.disabled = false;\n                inst.trigger.filter( \"button\" ).\n                each( function() {\n                    this.disabled = false;\n                } ).end().\n                filter( \"img\" ).css( { opacity: \"1.0\", cursor: \"\" } );\n            } else if ( nodeName === \"div\" || nodeName === \"span\" ) {\n                inline = $target.children( \".\" + this._inlineClass );\n                inline.children().removeClass( \"ui-state-disabled\" );\n                inline.find( \"select.ui-datepicker-month, select.ui-datepicker-year\" ).\n                prop( \"disabled\", false );\n            }\n            this._disabledInputs = $.map( this._disabledInputs,\n\n                // Delete entry\n                function( value ) {\n                    return ( value === target ? null : value );\n                } );\n        },\n\n        /* Disable the date picker to a jQuery selection.\n         * @param  target\telement - the target input field or division or span\n         */\n        _disableDatepicker: function( target ) {\n            var nodeName, inline,\n                $target = $( target ),\n                inst = $.data( target, \"datepicker\" );\n\n            if ( !$target.hasClass( this.markerClassName ) ) {\n                return;\n            }\n\n            nodeName = target.nodeName.toLowerCase();\n            if ( nodeName === \"input\" ) {\n                target.disabled = true;\n                inst.trigger.filter( \"button\" ).\n                each( function() {\n                    this.disabled = true;\n                } ).end().\n                filter( \"img\" ).css( { opacity: \"0.5\", cursor: \"default\" } );\n            } else if ( nodeName === \"div\" || nodeName === \"span\" ) {\n                inline = $target.children( \".\" + this._inlineClass );\n                inline.children().addClass( \"ui-state-disabled\" );\n                inline.find( \"select.ui-datepicker-month, select.ui-datepicker-year\" ).\n                prop( \"disabled\", true );\n            }\n            this._disabledInputs = $.map( this._disabledInputs,\n\n                // Delete entry\n                function( value ) {\n                    return ( value === target ? null : value );\n                } );\n            this._disabledInputs[ this._disabledInputs.length ] = target;\n        },\n\n        /* Is the first field in a jQuery collection disabled as a datepicker?\n         * @param  target\telement - the target input field or division or span\n         * @return boolean - true if disabled, false if enabled\n         */\n        _isDisabledDatepicker: function( target ) {\n            if ( !target ) {\n                return false;\n            }\n            for ( var i = 0; i < this._disabledInputs.length; i++ ) {\n                if ( this._disabledInputs[ i ] === target ) {\n                    return true;\n                }\n            }\n            return false;\n        },\n\n        /* Retrieve the instance data for the target control.\n         * @param  target  element - the target input field or division or span\n         * @return  object - the associated instance data\n         * @throws  error if a jQuery problem getting data\n         */\n        _getInst: function( target ) {\n            try {\n                return $.data( target, \"datepicker\" );\n            } catch ( err ) {\n                throw \"Missing instance data for this datepicker\";\n            }\n        },\n\n        /* Update or retrieve the settings for a date picker attached to an input field or division.\n         * @param  target  element - the target input field or division or span\n         * @param  name\tobject - the new settings to update or\n         *\t\t\t\tstring - the name of the setting to change or retrieve,\n         *\t\t\t\twhen retrieving also \"all\" for all instance settings or\n         *\t\t\t\t\"defaults\" for all global defaults\n         * @param  value   any - the new value for the setting\n         *\t\t\t\t(omit if above is an object or to retrieve a value)\n         */\n        _optionDatepicker: function( target, name, value ) {\n            var settings, date, minDate, maxDate,\n                inst = this._getInst( target );\n\n            if ( arguments.length === 2 && typeof name === \"string\" ) {\n                return ( name === \"defaults\" ? $.extend( {}, $.datepicker._defaults ) :\n                    ( inst ? ( name === \"all\" ? $.extend( {}, inst.settings ) :\n                        this._get( inst, name ) ) : null ) );\n            }\n\n            settings = name || {};\n            if ( typeof name === \"string\" ) {\n                settings = {};\n                settings[ name ] = value;\n            }\n\n            if ( inst ) {\n                if ( this._curInst === inst ) {\n                    this._hideDatepicker();\n                }\n\n                date = this._getDateDatepicker( target, true );\n                minDate = this._getMinMaxDate( inst, \"min\" );\n                maxDate = this._getMinMaxDate( inst, \"max\" );\n                datepicker_extendRemove( inst.settings, settings );\n\n                // reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided\n                if ( minDate !== null && settings.dateFormat !== undefined && settings.minDate === undefined ) {\n                    inst.settings.minDate = this._formatDate( inst, minDate );\n                }\n                if ( maxDate !== null && settings.dateFormat !== undefined && settings.maxDate === undefined ) {\n                    inst.settings.maxDate = this._formatDate( inst, maxDate );\n                }\n                if ( \"disabled\" in settings ) {\n                    if ( settings.disabled ) {\n                        this._disableDatepicker( target );\n                    } else {\n                        this._enableDatepicker( target );\n                    }\n                }\n                this._attachments( $( target ), inst );\n                this._autoSize( inst );\n                this._setDate( inst, date );\n                this._updateAlternate( inst );\n                this._updateDatepicker( inst );\n            }\n        },\n\n        // Change method deprecated\n        _changeDatepicker: function( target, name, value ) {\n            this._optionDatepicker( target, name, value );\n        },\n\n        /* Redraw the date picker attached to an input field or division.\n         * @param  target  element - the target input field or division or span\n         */\n        _refreshDatepicker: function( target ) {\n            var inst = this._getInst( target );\n            if ( inst ) {\n                this._updateDatepicker( inst );\n            }\n        },\n\n        /* Set the dates for a jQuery selection.\n         * @param  target element - the target input field or division or span\n         * @param  date\tDate - the new date\n         */\n        _setDateDatepicker: function( target, date ) {\n            var inst = this._getInst( target );\n            if ( inst ) {\n                this._setDate( inst, date );\n                this._updateDatepicker( inst );\n                this._updateAlternate( inst );\n            }\n        },\n\n        /* Get the date(s) for the first entry in a jQuery selection.\n         * @param  target element - the target input field or division or span\n         * @param  noDefault boolean - true if no default date is to be used\n         * @return Date - the current date\n         */\n        _getDateDatepicker: function( target, noDefault ) {\n            var inst = this._getInst( target );\n            if ( inst && !inst.inline ) {\n                this._setDateFromField( inst, noDefault );\n            }\n            return ( inst ? this._getDate( inst ) : null );\n        },\n\n        /* Handle keystrokes. */\n        _doKeyDown: function( event ) {\n            var onSelect, dateStr, sel,\n                inst = $.datepicker._getInst( event.target ),\n                handled = true,\n                isRTL = inst.dpDiv.is( \".ui-datepicker-rtl\" );\n\n            inst._keyEvent = true;\n            if ( $.datepicker._datepickerShowing ) {\n                switch ( event.keyCode ) {\n                    case 9: $.datepicker._hideDatepicker();\n                        handled = false;\n                        break; // hide on tab out\n                    case 13: sel = $( \"td.\" + $.datepicker._dayOverClass + \":not(.\" +\n                        $.datepicker._currentClass + \")\", inst.dpDiv );\n                        if ( sel[ 0 ] ) {\n                            $.datepicker._selectDay( event.target, inst.selectedMonth, inst.selectedYear, sel[ 0 ] );\n                        }\n\n                        onSelect = $.datepicker._get( inst, \"onSelect\" );\n                        if ( onSelect ) {\n                            dateStr = $.datepicker._formatDate( inst );\n\n                            // Trigger custom callback\n                            onSelect.apply( ( inst.input ? inst.input[ 0 ] : null ), [ dateStr, inst ] );\n                        } else {\n                            $.datepicker._hideDatepicker();\n                        }\n\n                        return false; // don't submit the form\n                    case 27: $.datepicker._hideDatepicker();\n                        break; // hide on escape\n                    case 33: $.datepicker._adjustDate( event.target, ( event.ctrlKey ?\n                        -$.datepicker._get( inst, \"stepBigMonths\" ) :\n                        -$.datepicker._get( inst, \"stepMonths\" ) ), \"M\" );\n                        break; // previous month/year on page up/+ ctrl\n                    case 34: $.datepicker._adjustDate( event.target, ( event.ctrlKey ?\n                        +$.datepicker._get( inst, \"stepBigMonths\" ) :\n                        +$.datepicker._get( inst, \"stepMonths\" ) ), \"M\" );\n                        break; // next month/year on page down/+ ctrl\n                    case 35: if ( event.ctrlKey || event.metaKey ) {\n                        $.datepicker._clearDate( event.target );\n                    }\n                        handled = event.ctrlKey || event.metaKey;\n                        break; // clear on ctrl or command +end\n                    case 36: if ( event.ctrlKey || event.metaKey ) {\n                        $.datepicker._gotoToday( event.target );\n                    }\n                        handled = event.ctrlKey || event.metaKey;\n                        break; // current on ctrl or command +home\n                    case 37: if ( event.ctrlKey || event.metaKey ) {\n                        $.datepicker._adjustDate( event.target, ( isRTL ? +1 : -1 ), \"D\" );\n                    }\n                        handled = event.ctrlKey || event.metaKey;\n\n                        // -1 day on ctrl or command +left\n                        if ( event.originalEvent.altKey ) {\n                            $.datepicker._adjustDate( event.target, ( event.ctrlKey ?\n                                -$.datepicker._get( inst, \"stepBigMonths\" ) :\n                                -$.datepicker._get( inst, \"stepMonths\" ) ), \"M\" );\n                        }\n\n                        // next month/year on alt +left on Mac\n                        break;\n                    case 38: if ( event.ctrlKey || event.metaKey ) {\n                        $.datepicker._adjustDate( event.target, -7, \"D\" );\n                    }\n                        handled = event.ctrlKey || event.metaKey;\n                        break; // -1 week on ctrl or command +up\n                    case 39: if ( event.ctrlKey || event.metaKey ) {\n                        $.datepicker._adjustDate( event.target, ( isRTL ? -1 : +1 ), \"D\" );\n                    }\n                        handled = event.ctrlKey || event.metaKey;\n\n                        // +1 day on ctrl or command +right\n                        if ( event.originalEvent.altKey ) {\n                            $.datepicker._adjustDate( event.target, ( event.ctrlKey ?\n                                +$.datepicker._get( inst, \"stepBigMonths\" ) :\n                                +$.datepicker._get( inst, \"stepMonths\" ) ), \"M\" );\n                        }\n\n                        // next month/year on alt +right\n                        break;\n                    case 40: if ( event.ctrlKey || event.metaKey ) {\n                        $.datepicker._adjustDate( event.target, +7, \"D\" );\n                    }\n                        handled = event.ctrlKey || event.metaKey;\n                        break; // +1 week on ctrl or command +down\n                    default: handled = false;\n                }\n            } else if ( event.keyCode === 36 && event.ctrlKey ) { // display the date picker on ctrl+home\n                $.datepicker._showDatepicker( this );\n            } else {\n                handled = false;\n            }\n\n            if ( handled ) {\n                event.preventDefault();\n                event.stopPropagation();\n            }\n        },\n\n        /* Filter entered characters - based on date format. */\n        _doKeyPress: function( event ) {\n            var chars, chr,\n                inst = $.datepicker._getInst( event.target );\n\n            if ( $.datepicker._get( inst, \"constrainInput\" ) ) {\n                chars = $.datepicker._possibleChars( $.datepicker._get( inst, \"dateFormat\" ) );\n                chr = String.fromCharCode( event.charCode == null ? event.keyCode : event.charCode );\n                return event.ctrlKey || event.metaKey || ( chr < \" \" || !chars || chars.indexOf( chr ) > -1 );\n            }\n        },\n\n        /* Synchronise manual entry and field/alternate field. */\n        _doKeyUp: function( event ) {\n            var date,\n                inst = $.datepicker._getInst( event.target );\n\n            if ( inst.input.val() !== inst.lastVal ) {\n                try {\n                    date = $.datepicker.parseDate( $.datepicker._get( inst, \"dateFormat\" ),\n                        ( inst.input ? inst.input.val() : null ),\n                        $.datepicker._getFormatConfig( inst ) );\n\n                    if ( date ) { // only if valid\n                        $.datepicker._setDateFromField( inst );\n                        $.datepicker._updateAlternate( inst );\n                        $.datepicker._updateDatepicker( inst );\n                    }\n                } catch ( err ) {\n                }\n            }\n            return true;\n        },\n\n        /* Pop-up the date picker for a given input field.\n         * If false returned from beforeShow event handler do not show.\n         * @param  input  element - the input field attached to the date picker or\n         *\t\t\t\t\tevent - if triggered by focus\n         */\n        _showDatepicker: function( input ) {\n            input = input.target || input;\n            if ( input.nodeName.toLowerCase() !== \"input\" ) { // find from button/image trigger\n                input = $( \"input\", input.parentNode )[ 0 ];\n            }\n\n            if ( $.datepicker._isDisabledDatepicker( input ) || $.datepicker._lastInput === input ) { // already here\n                return;\n            }\n\n            var inst, beforeShow, beforeShowSettings, isFixed,\n                offset, showAnim, duration;\n\n            inst = $.datepicker._getInst( input );\n            if ( $.datepicker._curInst && $.datepicker._curInst !== inst ) {\n                $.datepicker._curInst.dpDiv.stop( true, true );\n                if ( inst && $.datepicker._datepickerShowing ) {\n                    $.datepicker._hideDatepicker( $.datepicker._curInst.input[ 0 ] );\n                }\n            }\n\n            beforeShow = $.datepicker._get( inst, \"beforeShow\" );\n            beforeShowSettings = beforeShow ? beforeShow.apply( input, [ input, inst ] ) : {};\n            if ( beforeShowSettings === false ) {\n                return;\n            }\n            datepicker_extendRemove( inst.settings, beforeShowSettings );\n\n            inst.lastVal = null;\n            $.datepicker._lastInput = input;\n            $.datepicker._setDateFromField( inst );\n\n            if ( $.datepicker._inDialog ) { // hide cursor\n                input.value = \"\";\n            }\n            if ( !$.datepicker._pos ) { // position below input\n                $.datepicker._pos = $.datepicker._findPos( input );\n                $.datepicker._pos[ 1 ] += input.offsetHeight; // add the height\n            }\n\n            isFixed = false;\n            $( input ).parents().each( function() {\n                isFixed |= $( this ).css( \"position\" ) === \"fixed\";\n                return !isFixed;\n            } );\n\n            offset = { left: $.datepicker._pos[ 0 ], top: $.datepicker._pos[ 1 ] };\n            $.datepicker._pos = null;\n\n            //to avoid flashes on Firefox\n            inst.dpDiv.empty();\n\n            // determine sizing offscreen\n            inst.dpDiv.css( { position: \"absolute\", display: \"block\", top: \"-1000px\" } );\n            $.datepicker._updateDatepicker( inst );\n\n            // fix width for dynamic number of date pickers\n            // and adjust position before showing\n            offset = $.datepicker._checkOffset( inst, offset, isFixed );\n            inst.dpDiv.css( { position: ( $.datepicker._inDialog && $.blockUI ?\n                    \"static\" : ( isFixed ? \"fixed\" : \"absolute\" ) ), display: \"none\",\n                left: offset.left + \"px\", top: offset.top + \"px\" } );\n\n            if ( !inst.inline ) {\n                showAnim = $.datepicker._get( inst, \"showAnim\" );\n                duration = $.datepicker._get( inst, \"duration\" );\n                inst.dpDiv.css( \"z-index\", datepicker_getZindex( $( input ) ) + 1 );\n                $.datepicker._datepickerShowing = true;\n\n                if ( $.effects && $.effects.effect[ showAnim ] ) {\n                    inst.dpDiv.show( showAnim, $.datepicker._get( inst, \"showOptions\" ), duration );\n                } else {\n                    inst.dpDiv[ showAnim || \"show\" ]( showAnim ? duration : null );\n                }\n\n                if ( $.datepicker._shouldFocusInput( inst ) ) {\n                    inst.input.trigger( \"focus\" );\n                }\n\n                $.datepicker._curInst = inst;\n            }\n        },\n\n        /* Generate the date picker content. */\n        _updateDatepicker: function( inst ) {\n            this.maxRows = 4; //Reset the max number of rows being displayed (see #7043)\n            datepicker_instActive = inst; // for delegate hover events\n            inst.dpDiv.empty().append( this._generateHTML( inst ) );\n            this._attachHandlers( inst );\n\n            var origyearshtml,\n                numMonths = this._getNumberOfMonths( inst ),\n                cols = numMonths[ 1 ],\n                width = 17,\n                activeCell = inst.dpDiv.find( \".\" + this._dayOverClass + \" a\" ),\n                onUpdateDatepicker = $.datepicker._get( inst, \"onUpdateDatepicker\" );\n\n            if ( activeCell.length > 0 ) {\n                datepicker_handleMouseover.apply( activeCell.get( 0 ) );\n            }\n\n            inst.dpDiv.removeClass( \"ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4\" ).width( \"\" );\n            if ( cols > 1 ) {\n                inst.dpDiv.addClass( \"ui-datepicker-multi-\" + cols ).css( \"width\", ( width * cols ) + \"em\" );\n            }\n            inst.dpDiv[ ( numMonths[ 0 ] !== 1 || numMonths[ 1 ] !== 1 ? \"add\" : \"remove\" ) +\n            \"Class\" ]( \"ui-datepicker-multi\" );\n            inst.dpDiv[ ( this._get( inst, \"isRTL\" ) ? \"add\" : \"remove\" ) +\n            \"Class\" ]( \"ui-datepicker-rtl\" );\n\n            if ( inst === $.datepicker._curInst && $.datepicker._datepickerShowing && $.datepicker._shouldFocusInput( inst ) ) {\n                inst.input.trigger( \"focus\" );\n            }\n\n            // Deffered render of the years select (to avoid flashes on Firefox)\n            if ( inst.yearshtml ) {\n                origyearshtml = inst.yearshtml;\n                setTimeout( function() {\n\n                    //assure that inst.yearshtml didn't change.\n                    if ( origyearshtml === inst.yearshtml && inst.yearshtml ) {\n                        inst.dpDiv.find( \"select.ui-datepicker-year\" ).first().replaceWith( inst.yearshtml );\n                    }\n                    origyearshtml = inst.yearshtml = null;\n                }, 0 );\n            }\n\n            if ( onUpdateDatepicker ) {\n                onUpdateDatepicker.apply( ( inst.input ? inst.input[ 0 ] : null ), [ inst ] );\n            }\n        },\n\n        // #6694 - don't focus the input if it's already focused\n        // this breaks the change event in IE\n        // Support: IE and jQuery <1.9\n        _shouldFocusInput: function( inst ) {\n            return inst.input && inst.input.is( \":visible\" ) && !inst.input.is( \":disabled\" ) && !inst.input.is( \":focus\" );\n        },\n\n        /* Check positioning to remain on screen. */\n        _checkOffset: function( inst, offset, isFixed ) {\n            var dpWidth = inst.dpDiv.outerWidth(),\n                dpHeight = inst.dpDiv.outerHeight(),\n                inputWidth = inst.input ? inst.input.outerWidth() : 0,\n                inputHeight = inst.input ? inst.input.outerHeight() : 0,\n                viewWidth = document.documentElement.clientWidth + ( isFixed ? 0 : $( document ).scrollLeft() ),\n                viewHeight = document.documentElement.clientHeight + ( isFixed ? 0 : $( document ).scrollTop() );\n\n            offset.left -= ( this._get( inst, \"isRTL\" ) ? ( dpWidth - inputWidth ) : 0 );\n            offset.left -= ( isFixed && offset.left === inst.input.offset().left ) ? $( document ).scrollLeft() : 0;\n            offset.top -= ( isFixed && offset.top === ( inst.input.offset().top + inputHeight ) ) ? $( document ).scrollTop() : 0;\n\n            // Now check if datepicker is showing outside window viewport - move to a better place if so.\n            offset.left -= Math.min( offset.left, ( offset.left + dpWidth > viewWidth && viewWidth > dpWidth ) ?\n                Math.abs( offset.left + dpWidth - viewWidth ) : 0 );\n            offset.top -= Math.min( offset.top, ( offset.top + dpHeight > viewHeight && viewHeight > dpHeight ) ?\n                Math.abs( dpHeight + inputHeight ) : 0 );\n\n            return offset;\n        },\n\n        /* Find an object's position on the screen. */\n        _findPos: function( obj ) {\n            var position,\n                inst = this._getInst( obj ),\n                isRTL = this._get( inst, \"isRTL\" );\n\n            while ( obj && ( obj.type === \"hidden\" || obj.nodeType !== 1 || $.expr.pseudos.hidden( obj ) ) ) {\n                obj = obj[ isRTL ? \"previousSibling\" : \"nextSibling\" ];\n            }\n\n            position = $( obj ).offset();\n            return [ position.left, position.top ];\n        },\n\n        /* Hide the date picker from view.\n         * @param  input  element - the input field attached to the date picker\n         */\n        _hideDatepicker: function( input ) {\n            var showAnim, duration, postProcess, onClose,\n                inst = this._curInst;\n\n            if ( !inst || ( input && inst !== $.data( input, \"datepicker\" ) ) ) {\n                return;\n            }\n\n            if ( this._datepickerShowing ) {\n                showAnim = this._get( inst, \"showAnim\" );\n                duration = this._get( inst, \"duration\" );\n                postProcess = function() {\n                    $.datepicker._tidyDialog( inst );\n                };\n\n                // DEPRECATED: after BC for 1.8.x $.effects[ showAnim ] is not needed\n                if ( $.effects && ( $.effects.effect[ showAnim ] || $.effects[ showAnim ] ) ) {\n                    inst.dpDiv.hide( showAnim, $.datepicker._get( inst, \"showOptions\" ), duration, postProcess );\n                } else {\n                    inst.dpDiv[ ( showAnim === \"slideDown\" ? \"slideUp\" :\n                        ( showAnim === \"fadeIn\" ? \"fadeOut\" : \"hide\" ) ) ]( ( showAnim ? duration : null ), postProcess );\n                }\n\n                if ( !showAnim ) {\n                    postProcess();\n                }\n                this._datepickerShowing = false;\n\n                onClose = this._get( inst, \"onClose\" );\n                if ( onClose ) {\n                    onClose.apply( ( inst.input ? inst.input[ 0 ] : null ), [ ( inst.input ? inst.input.val() : \"\" ), inst ] );\n                }\n\n                this._lastInput = null;\n                if ( this._inDialog ) {\n                    this._dialogInput.css( { position: \"absolute\", left: \"0\", top: \"-100px\" } );\n                    if ( $.blockUI ) {\n                        $.unblockUI();\n                        $( \"body\" ).append( this.dpDiv );\n                    }\n                }\n                this._inDialog = false;\n            }\n        },\n\n        /* Tidy up after a dialog display. */\n        _tidyDialog: function( inst ) {\n            inst.dpDiv.removeClass( this._dialogClass ).off( \".ui-datepicker-calendar\" );\n        },\n\n        /* Close date picker if clicked elsewhere. */\n        _checkExternalClick: function( event ) {\n            if ( !$.datepicker._curInst ) {\n                return;\n            }\n\n            var $target = $( event.target ),\n                inst = $.datepicker._getInst( $target[ 0 ] );\n\n            if ( ( ( $target[ 0 ].id !== $.datepicker._mainDivId &&\n                    $target.parents( \"#\" + $.datepicker._mainDivId ).length === 0 &&\n                    !$target.hasClass( $.datepicker.markerClassName ) &&\n                    !$target.closest( \".\" + $.datepicker._triggerClass ).length &&\n                    $.datepicker._datepickerShowing && !( $.datepicker._inDialog && $.blockUI ) ) ) ||\n                ( $target.hasClass( $.datepicker.markerClassName ) && $.datepicker._curInst !== inst ) ) {\n                $.datepicker._hideDatepicker();\n            }\n        },\n\n        /* Adjust one of the date sub-fields. */\n        _adjustDate: function( id, offset, period ) {\n            var target = $( id ),\n                inst = this._getInst( target[ 0 ] );\n\n            if ( this._isDisabledDatepicker( target[ 0 ] ) ) {\n                return;\n            }\n            this._adjustInstDate( inst, offset, period );\n            this._updateDatepicker( inst );\n        },\n\n        /* Action for current link. */\n        _gotoToday: function( id ) {\n            var date,\n                target = $( id ),\n                inst = this._getInst( target[ 0 ] );\n\n            if ( this._get( inst, \"gotoCurrent\" ) && inst.currentDay ) {\n                inst.selectedDay = inst.currentDay;\n                inst.drawMonth = inst.selectedMonth = inst.currentMonth;\n                inst.drawYear = inst.selectedYear = inst.currentYear;\n            } else {\n                date = new Date();\n                inst.selectedDay = date.getDate();\n                inst.drawMonth = inst.selectedMonth = date.getMonth();\n                inst.drawYear = inst.selectedYear = date.getFullYear();\n            }\n            this._notifyChange( inst );\n            this._adjustDate( target );\n        },\n\n        /* Action for selecting a new month/year. */\n        _selectMonthYear: function( id, select, period ) {\n            var target = $( id ),\n                inst = this._getInst( target[ 0 ] );\n\n            inst[ \"selected\" + ( period === \"M\" ? \"Month\" : \"Year\" ) ] =\n                inst[ \"draw\" + ( period === \"M\" ? \"Month\" : \"Year\" ) ] =\n                    parseInt( select.options[ select.selectedIndex ].value, 10 );\n\n            this._notifyChange( inst );\n            this._adjustDate( target );\n        },\n\n        /* Action for selecting a day. */\n        _selectDay: function( id, month, year, td ) {\n            var inst,\n                target = $( id );\n\n            if ( $( td ).hasClass( this._unselectableClass ) || this._isDisabledDatepicker( target[ 0 ] ) ) {\n                return;\n            }\n\n            inst = this._getInst( target[ 0 ] );\n            inst.selectedDay = inst.currentDay = parseInt( $( \"a\", td ).attr( \"data-date\" ) );\n            inst.selectedMonth = inst.currentMonth = month;\n            inst.selectedYear = inst.currentYear = year;\n            this._selectDate( id, this._formatDate( inst,\n                inst.currentDay, inst.currentMonth, inst.currentYear ) );\n        },\n\n        /* Erase the input field and hide the date picker. */\n        _clearDate: function( id ) {\n            var target = $( id );\n            this._selectDate( target, \"\" );\n        },\n\n        /* Update the input field with the selected date. */\n        _selectDate: function( id, dateStr ) {\n            var onSelect,\n                target = $( id ),\n                inst = this._getInst( target[ 0 ] );\n\n            dateStr = ( dateStr != null ? dateStr : this._formatDate( inst ) );\n            if ( inst.input ) {\n                inst.input.val( dateStr );\n            }\n            this._updateAlternate( inst );\n\n            onSelect = this._get( inst, \"onSelect\" );\n            if ( onSelect ) {\n                onSelect.apply( ( inst.input ? inst.input[ 0 ] : null ), [ dateStr, inst ] );  // trigger custom callback\n            } else if ( inst.input ) {\n                inst.input.trigger( \"change\" ); // fire the change event\n            }\n\n            if ( inst.inline ) {\n                this._updateDatepicker( inst );\n            } else {\n                this._hideDatepicker();\n                this._lastInput = inst.input[ 0 ];\n                if ( typeof( inst.input[ 0 ] ) !== \"object\" ) {\n                    inst.input.trigger( \"focus\" ); // restore focus\n                }\n                this._lastInput = null;\n            }\n        },\n\n        /* Update any alternate field to synchronise with the main field. */\n        _updateAlternate: function( inst ) {\n            var altFormat, date, dateStr,\n                altField = this._get( inst, \"altField\" );\n\n            if ( altField ) { // update alternate field too\n                altFormat = this._get( inst, \"altFormat\" ) || this._get( inst, \"dateFormat\" );\n                date = this._getDate( inst );\n                dateStr = this.formatDate( altFormat, date, this._getFormatConfig( inst ) );\n                $( document ).find( altField ).val( dateStr );\n            }\n        },\n\n        /* Set as beforeShowDay function to prevent selection of weekends.\n         * @param  date  Date - the date to customise\n         * @return [boolean, string] - is this date selectable?, what is its CSS class?\n         */\n        noWeekends: function( date ) {\n            var day = date.getDay();\n            return [ ( day > 0 && day < 6 ), \"\" ];\n        },\n\n        /* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.\n         * @param  date  Date - the date to get the week for\n         * @return  number - the number of the week within the year that contains this date\n         */\n        iso8601Week: function( date ) {\n            var time,\n                checkDate = new Date( date.getTime() );\n\n            // Find Thursday of this week starting on Monday\n            checkDate.setDate( checkDate.getDate() + 4 - ( checkDate.getDay() || 7 ) );\n\n            time = checkDate.getTime();\n            checkDate.setMonth( 0 ); // Compare with Jan 1\n            checkDate.setDate( 1 );\n            return Math.floor( Math.round( ( time - checkDate ) / 86400000 ) / 7 ) + 1;\n        },\n\n        /* Parse a string value into a date object.\n         * See formatDate below for the possible formats.\n         *\n         * @param  format string - the expected format of the date\n         * @param  value string - the date in the above format\n         * @param  settings Object - attributes include:\n         *\t\t\t\t\tshortYearCutoff  number - the cutoff year for determining the century (optional)\n         *\t\t\t\t\tdayNamesShort\tstring[7] - abbreviated names of the days from Sunday (optional)\n         *\t\t\t\t\tdayNames\t\tstring[7] - names of the days from Sunday (optional)\n         *\t\t\t\t\tmonthNamesShort string[12] - abbreviated names of the months (optional)\n         *\t\t\t\t\tmonthNames\t\tstring[12] - names of the months (optional)\n         * @return  Date - the extracted date value or null if value is blank\n         */\n        parseDate: function( format, value, settings ) {\n            if ( format == null || value == null ) {\n                throw \"Invalid arguments\";\n            }\n\n            value = ( typeof value === \"object\" ? value.toString() : value + \"\" );\n            if ( value === \"\" ) {\n                return null;\n            }\n\n            var iFormat, dim, extra,\n                iValue = 0,\n                shortYearCutoffTemp = ( settings ? settings.shortYearCutoff : null ) || this._defaults.shortYearCutoff,\n                shortYearCutoff = ( typeof shortYearCutoffTemp !== \"string\" ? shortYearCutoffTemp :\n                    new Date().getFullYear() % 100 + parseInt( shortYearCutoffTemp, 10 ) ),\n                dayNamesShort = ( settings ? settings.dayNamesShort : null ) || this._defaults.dayNamesShort,\n                dayNames = ( settings ? settings.dayNames : null ) || this._defaults.dayNames,\n                monthNamesShort = ( settings ? settings.monthNamesShort : null ) || this._defaults.monthNamesShort,\n                monthNames = ( settings ? settings.monthNames : null ) || this._defaults.monthNames,\n                year = -1,\n                month = -1,\n                day = -1,\n                doy = -1,\n                literal = false,\n                date,\n\n                // Check whether a format character is doubled\n                lookAhead = function( match ) {\n                    var matches = ( iFormat + 1 < format.length && format.charAt( iFormat + 1 ) === match );\n                    if ( matches ) {\n                        iFormat++;\n                    }\n                    return matches;\n                },\n\n                // Extract a number from the string value\n                getNumber = function( match ) {\n                    var isDoubled = lookAhead( match ),\n                        size = ( match === \"@\" ? 14 : ( match === \"!\" ? 20 :\n                            ( match === \"y\" && isDoubled ? 4 : ( match === \"o\" ? 3 : 2 ) ) ) ),\n                        minSize = ( match === \"y\" ? size : 1 ),\n                        digits = new RegExp( \"^\\\\d{\" + minSize + \",\" + size + \"}\" ),\n                        num = value.substring( iValue ).match( digits );\n                    if ( !num ) {\n                        throw \"Missing number at position \" + iValue;\n                    }\n                    iValue += num[ 0 ].length;\n                    return parseInt( num[ 0 ], 10 );\n                },\n\n                // Extract a name from the string value and convert to an index\n                getName = function( match, shortNames, longNames ) {\n                    var index = -1,\n                        names = $.map( lookAhead( match ) ? longNames : shortNames, function( v, k ) {\n                            return [ [ k, v ] ];\n                        } ).sort( function( a, b ) {\n                            return -( a[ 1 ].length - b[ 1 ].length );\n                        } );\n\n                    $.each( names, function( i, pair ) {\n                        var name = pair[ 1 ];\n                        if ( value.substr( iValue, name.length ).toLowerCase() === name.toLowerCase() ) {\n                            index = pair[ 0 ];\n                            iValue += name.length;\n                            return false;\n                        }\n                    } );\n                    if ( index !== -1 ) {\n                        return index + 1;\n                    } else {\n                        throw \"Unknown name at position \" + iValue;\n                    }\n                },\n\n                // Confirm that a literal character matches the string value\n                checkLiteral = function() {\n                    if ( value.charAt( iValue ) !== format.charAt( iFormat ) ) {\n                        throw \"Unexpected literal at position \" + iValue;\n                    }\n                    iValue++;\n                };\n\n            for ( iFormat = 0; iFormat < format.length; iFormat++ ) {\n                if ( literal ) {\n                    if ( format.charAt( iFormat ) === \"'\" && !lookAhead( \"'\" ) ) {\n                        literal = false;\n                    } else {\n                        checkLiteral();\n                    }\n                } else {\n                    switch ( format.charAt( iFormat ) ) {\n                        case \"d\":\n                            day = getNumber( \"d\" );\n                            break;\n                        case \"D\":\n                            getName( \"D\", dayNamesShort, dayNames );\n                            break;\n                        case \"o\":\n                            doy = getNumber( \"o\" );\n                            break;\n                        case \"m\":\n                            month = getNumber( \"m\" );\n                            break;\n                        case \"M\":\n                            month = getName( \"M\", monthNamesShort, monthNames );\n                            break;\n                        case \"y\":\n                            year = getNumber( \"y\" );\n                            break;\n                        case \"@\":\n                            date = new Date( getNumber( \"@\" ) );\n                            year = date.getFullYear();\n                            month = date.getMonth() + 1;\n                            day = date.getDate();\n                            break;\n                        case \"!\":\n                            date = new Date( ( getNumber( \"!\" ) - this._ticksTo1970 ) / 10000 );\n                            year = date.getFullYear();\n                            month = date.getMonth() + 1;\n                            day = date.getDate();\n                            break;\n                        case \"'\":\n                            if ( lookAhead( \"'\" ) ) {\n                                checkLiteral();\n                            } else {\n                                literal = true;\n                            }\n                            break;\n                        default:\n                            checkLiteral();\n                    }\n                }\n            }\n\n            if ( iValue < value.length ) {\n                extra = value.substr( iValue );\n                if ( !/^\\s+/.test( extra ) ) {\n                    throw \"Extra/unparsed characters found in date: \" + extra;\n                }\n            }\n\n            if ( year === -1 ) {\n                year = new Date().getFullYear();\n            } else if ( year < 100 ) {\n                year += new Date().getFullYear() - new Date().getFullYear() % 100 +\n                    ( year <= shortYearCutoff ? 0 : -100 );\n            }\n\n            if ( doy > -1 ) {\n                month = 1;\n                day = doy;\n                do {\n                    dim = this._getDaysInMonth( year, month - 1 );\n                    if ( day <= dim ) {\n                        break;\n                    }\n                    month++;\n                    day -= dim;\n                } while ( true );\n            }\n\n            date = this._daylightSavingAdjust( new Date( year, month - 1, day ) );\n            if ( date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day ) {\n                throw \"Invalid date\"; // E.g. 31/02/00\n            }\n            return date;\n        },\n\n        /* Standard date formats. */\n        ATOM: \"yy-mm-dd\", // RFC 3339 (ISO 8601)\n        COOKIE: \"D, dd M yy\",\n        ISO_8601: \"yy-mm-dd\",\n        RFC_822: \"D, d M y\",\n        RFC_850: \"DD, dd-M-y\",\n        RFC_1036: \"D, d M y\",\n        RFC_1123: \"D, d M yy\",\n        RFC_2822: \"D, d M yy\",\n        RSS: \"D, d M y\", // RFC 822\n        TICKS: \"!\",\n        TIMESTAMP: \"@\",\n        W3C: \"yy-mm-dd\", // ISO 8601\n\n        _ticksTo1970: ( ( ( 1970 - 1 ) * 365 + Math.floor( 1970 / 4 ) - Math.floor( 1970 / 100 ) +\n            Math.floor( 1970 / 400 ) ) * 24 * 60 * 60 * 10000000 ),\n\n        /* Format a date object into a string value.\n         * The format can be combinations of the following:\n         * d  - day of month (no leading zero)\n         * dd - day of month (two digit)\n         * o  - day of year (no leading zeros)\n         * oo - day of year (three digit)\n         * D  - day name short\n         * DD - day name long\n         * m  - month of year (no leading zero)\n         * mm - month of year (two digit)\n         * M  - month name short\n         * MM - month name long\n         * y  - year (two digit)\n         * yy - year (four digit)\n         * @ - Unix timestamp (ms since 01/01/1970)\n         * ! - Windows ticks (100ns since 01/01/0001)\n         * \"...\" - literal text\n         * '' - single quote\n         *\n         * @param  format string - the desired format of the date\n         * @param  date Date - the date value to format\n         * @param  settings Object - attributes include:\n         *\t\t\t\t\tdayNamesShort\tstring[7] - abbreviated names of the days from Sunday (optional)\n         *\t\t\t\t\tdayNames\t\tstring[7] - names of the days from Sunday (optional)\n         *\t\t\t\t\tmonthNamesShort string[12] - abbreviated names of the months (optional)\n         *\t\t\t\t\tmonthNames\t\tstring[12] - names of the months (optional)\n         * @return  string - the date in the above format\n         */\n        formatDate: function( format, date, settings ) {\n            if ( !date ) {\n                return \"\";\n            }\n\n            var iFormat,\n                dayNamesShort = ( settings ? settings.dayNamesShort : null ) || this._defaults.dayNamesShort,\n                dayNames = ( settings ? settings.dayNames : null ) || this._defaults.dayNames,\n                monthNamesShort = ( settings ? settings.monthNamesShort : null ) || this._defaults.monthNamesShort,\n                monthNames = ( settings ? settings.monthNames : null ) || this._defaults.monthNames,\n\n                // Check whether a format character is doubled\n                lookAhead = function( match ) {\n                    var matches = ( iFormat + 1 < format.length && format.charAt( iFormat + 1 ) === match );\n                    if ( matches ) {\n                        iFormat++;\n                    }\n                    return matches;\n                },\n\n                // Format a number, with leading zero if necessary\n                formatNumber = function( match, value, len ) {\n                    var num = \"\" + value;\n                    if ( lookAhead( match ) ) {\n                        while ( num.length < len ) {\n                            num = \"0\" + num;\n                        }\n                    }\n                    return num;\n                },\n\n                // Format a name, short or long as requested\n                formatName = function( match, value, shortNames, longNames ) {\n                    return ( lookAhead( match ) ? longNames[ value ] : shortNames[ value ] );\n                },\n                output = \"\",\n                literal = false;\n\n            if ( date ) {\n                for ( iFormat = 0; iFormat < format.length; iFormat++ ) {\n                    if ( literal ) {\n                        if ( format.charAt( iFormat ) === \"'\" && !lookAhead( \"'\" ) ) {\n                            literal = false;\n                        } else {\n                            output += format.charAt( iFormat );\n                        }\n                    } else {\n                        switch ( format.charAt( iFormat ) ) {\n                            case \"d\":\n                                output += formatNumber( \"d\", date.getDate(), 2 );\n                                break;\n                            case \"D\":\n                                output += formatName( \"D\", date.getDay(), dayNamesShort, dayNames );\n                                break;\n                            case \"o\":\n                                output += formatNumber( \"o\",\n                                    Math.round( ( new Date( date.getFullYear(), date.getMonth(), date.getDate() ).getTime() - new Date( date.getFullYear(), 0, 0 ).getTime() ) / 86400000 ), 3 );\n                                break;\n                            case \"m\":\n                                output += formatNumber( \"m\", date.getMonth() + 1, 2 );\n                                break;\n                            case \"M\":\n                                output += formatName( \"M\", date.getMonth(), monthNamesShort, monthNames );\n                                break;\n                            case \"y\":\n                                output += ( lookAhead( \"y\" ) ? date.getFullYear() :\n                                    ( date.getFullYear() % 100 < 10 ? \"0\" : \"\" ) + date.getFullYear() % 100 );\n                                break;\n                            case \"@\":\n                                output += date.getTime();\n                                break;\n                            case \"!\":\n                                output += date.getTime() * 10000 + this._ticksTo1970;\n                                break;\n                            case \"'\":\n                                if ( lookAhead( \"'\" ) ) {\n                                    output += \"'\";\n                                } else {\n                                    literal = true;\n                                }\n                                break;\n                            default:\n                                output += format.charAt( iFormat );\n                        }\n                    }\n                }\n            }\n            return output;\n        },\n\n        /* Extract all possible characters from the date format. */\n        _possibleChars: function( format ) {\n            var iFormat,\n                chars = \"\",\n                literal = false,\n\n                // Check whether a format character is doubled\n                lookAhead = function( match ) {\n                    var matches = ( iFormat + 1 < format.length && format.charAt( iFormat + 1 ) === match );\n                    if ( matches ) {\n                        iFormat++;\n                    }\n                    return matches;\n                };\n\n            for ( iFormat = 0; iFormat < format.length; iFormat++ ) {\n                if ( literal ) {\n                    if ( format.charAt( iFormat ) === \"'\" && !lookAhead( \"'\" ) ) {\n                        literal = false;\n                    } else {\n                        chars += format.charAt( iFormat );\n                    }\n                } else {\n                    switch ( format.charAt( iFormat ) ) {\n                        case \"d\": case \"m\": case \"y\": case \"@\":\n                            chars += \"0123456789\";\n                            break;\n                        case \"D\": case \"M\":\n                            return null; // Accept anything\n                        case \"'\":\n                            if ( lookAhead( \"'\" ) ) {\n                                chars += \"'\";\n                            } else {\n                                literal = true;\n                            }\n                            break;\n                        default:\n                            chars += format.charAt( iFormat );\n                    }\n                }\n            }\n            return chars;\n        },\n\n        /* Get a setting value, defaulting if necessary. */\n        _get: function( inst, name ) {\n            return inst.settings[ name ] !== undefined ?\n                inst.settings[ name ] : this._defaults[ name ];\n        },\n\n        /* Parse existing date and initialise date picker. */\n        _setDateFromField: function( inst, noDefault ) {\n            if ( inst.input.val() === inst.lastVal ) {\n                return;\n            }\n\n            var dateFormat = this._get( inst, \"dateFormat\" ),\n                dates = inst.lastVal = inst.input ? inst.input.val() : null,\n                defaultDate = this._getDefaultDate( inst ),\n                date = defaultDate,\n                settings = this._getFormatConfig( inst );\n\n            try {\n                date = this.parseDate( dateFormat, dates, settings ) || defaultDate;\n            } catch ( event ) {\n                dates = ( noDefault ? \"\" : dates );\n            }\n            inst.selectedDay = date.getDate();\n            inst.drawMonth = inst.selectedMonth = date.getMonth();\n            inst.drawYear = inst.selectedYear = date.getFullYear();\n            inst.currentDay = ( dates ? date.getDate() : 0 );\n            inst.currentMonth = ( dates ? date.getMonth() : 0 );\n            inst.currentYear = ( dates ? date.getFullYear() : 0 );\n            this._adjustInstDate( inst );\n        },\n\n        /* Retrieve the default date shown on opening. */\n        _getDefaultDate: function( inst ) {\n            return this._restrictMinMax( inst,\n                this._determineDate( inst, this._get( inst, \"defaultDate\" ), new Date() ) );\n        },\n\n        /* A date may be specified as an exact value or a relative one. */\n        _determineDate: function( inst, date, defaultDate ) {\n            var offsetNumeric = function( offset ) {\n                    var date = new Date();\n                    date.setDate( date.getDate() + offset );\n                    return date;\n                },\n                offsetString = function( offset ) {\n                    try {\n                        return $.datepicker.parseDate( $.datepicker._get( inst, \"dateFormat\" ),\n                            offset, $.datepicker._getFormatConfig( inst ) );\n                    } catch ( e ) {\n\n                        // Ignore\n                    }\n\n                    var date = ( offset.toLowerCase().match( /^c/ ) ?\n                            $.datepicker._getDate( inst ) : null ) || new Date(),\n                        year = date.getFullYear(),\n                        month = date.getMonth(),\n                        day = date.getDate(),\n                        pattern = /([+\\-]?[0-9]+)\\s*(d|D|w|W|m|M|y|Y)?/g,\n                        matches = pattern.exec( offset );\n\n                    while ( matches ) {\n                        switch ( matches[ 2 ] || \"d\" ) {\n                            case \"d\" : case \"D\" :\n                                day += parseInt( matches[ 1 ], 10 ); break;\n                            case \"w\" : case \"W\" :\n                                day += parseInt( matches[ 1 ], 10 ) * 7; break;\n                            case \"m\" : case \"M\" :\n                                month += parseInt( matches[ 1 ], 10 );\n                                day = Math.min( day, $.datepicker._getDaysInMonth( year, month ) );\n                                break;\n                            case \"y\": case \"Y\" :\n                                year += parseInt( matches[ 1 ], 10 );\n                                day = Math.min( day, $.datepicker._getDaysInMonth( year, month ) );\n                                break;\n                        }\n                        matches = pattern.exec( offset );\n                    }\n                    return new Date( year, month, day );\n                },\n                newDate = ( date == null || date === \"\" ? defaultDate : ( typeof date === \"string\" ? offsetString( date ) :\n                    ( typeof date === \"number\" ? ( isNaN( date ) ? defaultDate : offsetNumeric( date ) ) : new Date( date.getTime() ) ) ) );\n\n            newDate = ( newDate && newDate.toString() === \"Invalid Date\" ? defaultDate : newDate );\n            if ( newDate ) {\n                newDate.setHours( 0 );\n                newDate.setMinutes( 0 );\n                newDate.setSeconds( 0 );\n                newDate.setMilliseconds( 0 );\n            }\n            return this._daylightSavingAdjust( newDate );\n        },\n\n        /* Handle switch to/from daylight saving.\n         * Hours may be non-zero on daylight saving cut-over:\n         * > 12 when midnight changeover, but then cannot generate\n         * midnight datetime, so jump to 1AM, otherwise reset.\n         * @param  date  (Date) the date to check\n         * @return  (Date) the corrected date\n         */\n        _daylightSavingAdjust: function( date ) {\n            if ( !date ) {\n                return null;\n            }\n            date.setHours( date.getHours() > 12 ? date.getHours() + 2 : 0 );\n            return date;\n        },\n\n        /* Set the date(s) directly. */\n        _setDate: function( inst, date, noChange ) {\n            var clear = !date,\n                origMonth = inst.selectedMonth,\n                origYear = inst.selectedYear,\n                newDate = this._restrictMinMax( inst, this._determineDate( inst, date, new Date() ) );\n\n            inst.selectedDay = inst.currentDay = newDate.getDate();\n            inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();\n            inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();\n            if ( ( origMonth !== inst.selectedMonth || origYear !== inst.selectedYear ) && !noChange ) {\n                this._notifyChange( inst );\n            }\n            this._adjustInstDate( inst );\n            if ( inst.input ) {\n                inst.input.val( clear ? \"\" : this._formatDate( inst ) );\n            }\n        },\n\n        /* Retrieve the date(s) directly. */\n        _getDate: function( inst ) {\n            var startDate = ( !inst.currentYear || ( inst.input && inst.input.val() === \"\" ) ? null :\n                this._daylightSavingAdjust( new Date(\n                    inst.currentYear, inst.currentMonth, inst.currentDay ) ) );\n            return startDate;\n        },\n\n        /* Attach the onxxx handlers.  These are declared statically so\n         * they work with static code transformers like Caja.\n         */\n        _attachHandlers: function( inst ) {\n            var stepMonths = this._get( inst, \"stepMonths\" ),\n                id = \"#\" + inst.id.replace( /\\\\\\\\/g, \"\\\\\" );\n            inst.dpDiv.find( \"[data-handler]\" ).map( function() {\n                var handler = {\n                    prev: function() {\n                        $.datepicker._adjustDate( id, -stepMonths, \"M\" );\n                    },\n                    next: function() {\n                        $.datepicker._adjustDate( id, +stepMonths, \"M\" );\n                    },\n                    hide: function() {\n                        $.datepicker._hideDatepicker();\n                    },\n                    today: function() {\n                        $.datepicker._gotoToday( id );\n                    },\n                    selectDay: function() {\n                        $.datepicker._selectDay( id, +this.getAttribute( \"data-month\" ), +this.getAttribute( \"data-year\" ), this );\n                        return false;\n                    },\n                    selectMonth: function() {\n                        $.datepicker._selectMonthYear( id, this, \"M\" );\n                        return false;\n                    },\n                    selectYear: function() {\n                        $.datepicker._selectMonthYear( id, this, \"Y\" );\n                        return false;\n                    }\n                };\n                $( this ).on( this.getAttribute( \"data-event\" ), handler[ this.getAttribute( \"data-handler\" ) ] );\n            } );\n        },\n\n        /* Generate the HTML for the current state of the date picker. */\n        _generateHTML: function( inst ) {\n            var maxDraw, prevText, prev, nextText, next, currentText, gotoDate,\n                controls, buttonPanel, firstDay, showWeek, dayNames, dayNamesMin,\n                monthNames, monthNamesShort, beforeShowDay, showOtherMonths,\n                selectOtherMonths, defaultDate, html, dow, row, group, col, selectedDate,\n                cornerClass, calender, thead, day, daysInMonth, leadDays, curRows, numRows,\n                printDate, dRow, tbody, daySettings, otherMonth, unselectable,\n                tempDate = new Date(),\n                today = this._daylightSavingAdjust(\n                    new Date( tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate() ) ), // clear time\n                isRTL = this._get( inst, \"isRTL\" ),\n                showButtonPanel = this._get( inst, \"showButtonPanel\" ),\n                hideIfNoPrevNext = this._get( inst, \"hideIfNoPrevNext\" ),\n                navigationAsDateFormat = this._get( inst, \"navigationAsDateFormat\" ),\n                numMonths = this._getNumberOfMonths( inst ),\n                showCurrentAtPos = this._get( inst, \"showCurrentAtPos\" ),\n                stepMonths = this._get( inst, \"stepMonths\" ),\n                isMultiMonth = ( numMonths[ 0 ] !== 1 || numMonths[ 1 ] !== 1 ),\n                currentDate = this._daylightSavingAdjust( ( !inst.currentDay ? new Date( 9999, 9, 9 ) :\n                    new Date( inst.currentYear, inst.currentMonth, inst.currentDay ) ) ),\n                minDate = this._getMinMaxDate( inst, \"min\" ),\n                maxDate = this._getMinMaxDate( inst, \"max\" ),\n                drawMonth = inst.drawMonth - showCurrentAtPos,\n                drawYear = inst.drawYear;\n\n            if ( drawMonth < 0 ) {\n                drawMonth += 12;\n                drawYear--;\n            }\n            if ( maxDate ) {\n                maxDraw = this._daylightSavingAdjust( new Date( maxDate.getFullYear(),\n                    maxDate.getMonth() - ( numMonths[ 0 ] * numMonths[ 1 ] ) + 1, maxDate.getDate() ) );\n                maxDraw = ( minDate && maxDraw < minDate ? minDate : maxDraw );\n                while ( this._daylightSavingAdjust( new Date( drawYear, drawMonth, 1 ) ) > maxDraw ) {\n                    drawMonth--;\n                    if ( drawMonth < 0 ) {\n                        drawMonth = 11;\n                        drawYear--;\n                    }\n                }\n            }\n            inst.drawMonth = drawMonth;\n            inst.drawYear = drawYear;\n\n            prevText = this._get( inst, \"prevText\" );\n            prevText = ( !navigationAsDateFormat ? prevText : this.formatDate( prevText,\n                this._daylightSavingAdjust( new Date( drawYear, drawMonth - stepMonths, 1 ) ),\n                this._getFormatConfig( inst ) ) );\n\n            if ( this._canAdjustMonth( inst, -1, drawYear, drawMonth ) ) {\n                prev = $( \"<a>\" )\n                    .attr( {\n                        \"class\": \"ui-datepicker-prev ui-corner-all\",\n                        \"data-handler\": \"prev\",\n                        \"data-event\": \"click\",\n                        title: prevText\n                    } )\n                    .append(\n                        $( \"<span>\" )\n                            .addClass( \"ui-icon ui-icon-circle-triangle-\" +\n                                ( isRTL ? \"e\" : \"w\" ) )\n                            .text( prevText )\n                    )[ 0 ].outerHTML;\n            } else if ( hideIfNoPrevNext ) {\n                prev = \"\";\n            } else {\n                prev = $( \"<a>\" )\n                    .attr( {\n                        \"class\": \"ui-datepicker-prev ui-corner-all ui-state-disabled\",\n                        title: prevText\n                    } )\n                    .append(\n                        $( \"<span>\" )\n                            .addClass( \"ui-icon ui-icon-circle-triangle-\" +\n                                ( isRTL ? \"e\" : \"w\" ) )\n                            .text( prevText )\n                    )[ 0 ].outerHTML;\n            }\n\n            nextText = this._get( inst, \"nextText\" );\n            nextText = ( !navigationAsDateFormat ? nextText : this.formatDate( nextText,\n                this._daylightSavingAdjust( new Date( drawYear, drawMonth + stepMonths, 1 ) ),\n                this._getFormatConfig( inst ) ) );\n\n            if ( this._canAdjustMonth( inst, +1, drawYear, drawMonth ) ) {\n                next = $( \"<a>\" )\n                    .attr( {\n                        \"class\": \"ui-datepicker-next ui-corner-all\",\n                        \"data-handler\": \"next\",\n                        \"data-event\": \"click\",\n                        title: nextText\n                    } )\n                    .append(\n                        $( \"<span>\" )\n                            .addClass( \"ui-icon ui-icon-circle-triangle-\" +\n                                ( isRTL ? \"w\" : \"e\" ) )\n                            .text( nextText )\n                    )[ 0 ].outerHTML;\n            } else if ( hideIfNoPrevNext ) {\n                next = \"\";\n            } else {\n                next = $( \"<a>\" )\n                    .attr( {\n                        \"class\": \"ui-datepicker-next ui-corner-all ui-state-disabled\",\n                        title: nextText\n                    } )\n                    .append(\n                        $( \"<span>\" )\n                            .attr( \"class\", \"ui-icon ui-icon-circle-triangle-\" +\n                                ( isRTL ? \"w\" : \"e\" ) )\n                            .text( nextText )\n                    )[ 0 ].outerHTML;\n            }\n\n            currentText = this._get( inst, \"currentText\" );\n            gotoDate = ( this._get( inst, \"gotoCurrent\" ) && inst.currentDay ? currentDate : today );\n            currentText = ( !navigationAsDateFormat ? currentText :\n                this.formatDate( currentText, gotoDate, this._getFormatConfig( inst ) ) );\n\n            controls = \"\";\n            if ( !inst.inline ) {\n                controls = $( \"<button>\" )\n                    .attr( {\n                        type: \"button\",\n                        \"class\": \"ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all\",\n                        \"data-handler\": \"hide\",\n                        \"data-event\": \"click\"\n                    } )\n                    .text( this._get( inst, \"closeText\" ) )[ 0 ].outerHTML;\n            }\n\n            buttonPanel = \"\";\n            if ( showButtonPanel ) {\n                buttonPanel = $( \"<div class='ui-datepicker-buttonpane ui-widget-content'>\" )\n                    .append( isRTL ? controls : \"\" )\n                    .append( this._isInRange( inst, gotoDate ) ?\n                        $( \"<button>\" )\n                            .attr( {\n                                type: \"button\",\n                                \"class\": \"ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all\",\n                                \"data-handler\": \"today\",\n                                \"data-event\": \"click\"\n                            } )\n                            .text( currentText ) :\n                        \"\" )\n                    .append( isRTL ? \"\" : controls )[ 0 ].outerHTML;\n            }\n\n            firstDay = parseInt( this._get( inst, \"firstDay\" ), 10 );\n            firstDay = ( isNaN( firstDay ) ? 0 : firstDay );\n\n            showWeek = this._get( inst, \"showWeek\" );\n            dayNames = this._get( inst, \"dayNames\" );\n            dayNamesMin = this._get( inst, \"dayNamesMin\" );\n            monthNames = this._get( inst, \"monthNames\" );\n            monthNamesShort = this._get( inst, \"monthNamesShort\" );\n            beforeShowDay = this._get( inst, \"beforeShowDay\" );\n            showOtherMonths = this._get( inst, \"showOtherMonths\" );\n            selectOtherMonths = this._get( inst, \"selectOtherMonths\" );\n            defaultDate = this._getDefaultDate( inst );\n            html = \"\";\n\n            for ( row = 0; row < numMonths[ 0 ]; row++ ) {\n                group = \"\";\n                this.maxRows = 4;\n                for ( col = 0; col < numMonths[ 1 ]; col++ ) {\n                    selectedDate = this._daylightSavingAdjust( new Date( drawYear, drawMonth, inst.selectedDay ) );\n                    cornerClass = \" ui-corner-all\";\n                    calender = \"\";\n                    if ( isMultiMonth ) {\n                        calender += \"<div class='ui-datepicker-group\";\n                        if ( numMonths[ 1 ] > 1 ) {\n                            switch ( col ) {\n                                case 0: calender += \" ui-datepicker-group-first\";\n                                    cornerClass = \" ui-corner-\" + ( isRTL ? \"right\" : \"left\" ); break;\n                                case numMonths[ 1 ] - 1: calender += \" ui-datepicker-group-last\";\n                                    cornerClass = \" ui-corner-\" + ( isRTL ? \"left\" : \"right\" ); break;\n                                default: calender += \" ui-datepicker-group-middle\"; cornerClass = \"\"; break;\n                            }\n                        }\n                        calender += \"'>\";\n                    }\n                    calender += \"<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix\" + cornerClass + \"'>\" +\n                        ( /all|left/.test( cornerClass ) && row === 0 ? ( isRTL ? next : prev ) : \"\" ) +\n                        ( /all|right/.test( cornerClass ) && row === 0 ? ( isRTL ? prev : next ) : \"\" ) +\n                        this._generateMonthYearHeader( inst, drawMonth, drawYear, minDate, maxDate,\n                            row > 0 || col > 0, monthNames, monthNamesShort ) + // draw month headers\n                        \"</div><table class='ui-datepicker-calendar'><thead>\" +\n                        \"<tr>\";\n                    thead = ( showWeek ? \"<th class='ui-datepicker-week-col'>\" + this._get( inst, \"weekHeader\" ) + \"</th>\" : \"\" );\n                    for ( dow = 0; dow < 7; dow++ ) { // days of the week\n                        day = ( dow + firstDay ) % 7;\n                        thead += \"<th scope='col'\" + ( ( dow + firstDay + 6 ) % 7 >= 5 ? \" class='ui-datepicker-week-end'\" : \"\" ) + \">\" +\n                            \"<span title='\" + dayNames[ day ] + \"'>\" + dayNamesMin[ day ] + \"</span></th>\";\n                    }\n                    calender += thead + \"</tr></thead><tbody>\";\n                    daysInMonth = this._getDaysInMonth( drawYear, drawMonth );\n                    if ( drawYear === inst.selectedYear && drawMonth === inst.selectedMonth ) {\n                        inst.selectedDay = Math.min( inst.selectedDay, daysInMonth );\n                    }\n                    leadDays = ( this._getFirstDayOfMonth( drawYear, drawMonth ) - firstDay + 7 ) % 7;\n                    curRows = Math.ceil( ( leadDays + daysInMonth ) / 7 ); // calculate the number of rows to generate\n                    numRows = ( isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows ); //If multiple months, use the higher number of rows (see #7043)\n                    this.maxRows = numRows;\n                    printDate = this._daylightSavingAdjust( new Date( drawYear, drawMonth, 1 - leadDays ) );\n                    for ( dRow = 0; dRow < numRows; dRow++ ) { // create date picker rows\n                        calender += \"<tr>\";\n                        tbody = ( !showWeek ? \"\" : \"<td class='ui-datepicker-week-col'>\" +\n                            this._get( inst, \"calculateWeek\" )( printDate ) + \"</td>\" );\n                        for ( dow = 0; dow < 7; dow++ ) { // create date picker days\n                            daySettings = ( beforeShowDay ?\n                                beforeShowDay.apply( ( inst.input ? inst.input[ 0 ] : null ), [ printDate ] ) : [ true, \"\" ] );\n                            otherMonth = ( printDate.getMonth() !== drawMonth );\n                            unselectable = ( otherMonth && !selectOtherMonths ) || !daySettings[ 0 ] ||\n                                ( minDate && printDate < minDate ) || ( maxDate && printDate > maxDate );\n                            tbody += \"<td class='\" +\n                                ( ( dow + firstDay + 6 ) % 7 >= 5 ? \" ui-datepicker-week-end\" : \"\" ) + // highlight weekends\n                                ( otherMonth ? \" ui-datepicker-other-month\" : \"\" ) + // highlight days from other months\n                                ( ( printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent ) || // user pressed key\n                                ( defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime() ) ?\n\n                                    // or defaultDate is current printedDate and defaultDate is selectedDate\n                                    \" \" + this._dayOverClass : \"\" ) + // highlight selected day\n                                ( unselectable ? \" \" + this._unselectableClass + \" ui-state-disabled\" : \"\" ) +  // highlight unselectable days\n                                ( otherMonth && !showOtherMonths ? \"\" : \" \" + daySettings[ 1 ] + // highlight custom dates\n                                    ( printDate.getTime() === currentDate.getTime() ? \" \" + this._currentClass : \"\" ) + // highlight selected day\n                                    ( printDate.getTime() === today.getTime() ? \" ui-datepicker-today\" : \"\" ) ) + \"'\" + // highlight today (if different)\n                                ( ( !otherMonth || showOtherMonths ) && daySettings[ 2 ] ? \" title='\" + daySettings[ 2 ].replace( /'/g, \"&#39;\" ) + \"'\" : \"\" ) + // cell title\n                                ( unselectable ? \"\" : \" data-handler='selectDay' data-event='click' data-month='\" + printDate.getMonth() + \"' data-year='\" + printDate.getFullYear() + \"'\" ) + \">\" + // actions\n                                ( otherMonth && !showOtherMonths ? \"&#xa0;\" : // display for other months\n                                    ( unselectable ? \"<span class='ui-state-default'>\" + printDate.getDate() + \"</span>\" : \"<a class='ui-state-default\" +\n                                        ( printDate.getTime() === today.getTime() ? \" ui-state-highlight\" : \"\" ) +\n                                        ( printDate.getTime() === currentDate.getTime() ? \" ui-state-active\" : \"\" ) + // highlight selected day\n                                        ( otherMonth ? \" ui-priority-secondary\" : \"\" ) + // distinguish dates from other months\n                                        \"' href='#' aria-current='\" + ( printDate.getTime() === currentDate.getTime() ? \"true\" : \"false\" ) + // mark date as selected for screen reader\n                                        \"' data-date='\" + printDate.getDate() + // store date as data\n                                        \"'>\" + printDate.getDate() + \"</a>\" ) ) + \"</td>\"; // display selectable date\n                            printDate.setDate( printDate.getDate() + 1 );\n                            printDate = this._daylightSavingAdjust( printDate );\n                        }\n                        calender += tbody + \"</tr>\";\n                    }\n                    drawMonth++;\n                    if ( drawMonth > 11 ) {\n                        drawMonth = 0;\n                        drawYear++;\n                    }\n                    calender += \"</tbody></table>\" + ( isMultiMonth ? \"</div>\" +\n                        ( ( numMonths[ 0 ] > 0 && col === numMonths[ 1 ] - 1 ) ? \"<div class='ui-datepicker-row-break'></div>\" : \"\" ) : \"\" );\n                    group += calender;\n                }\n                html += group;\n            }\n            html += buttonPanel;\n            inst._keyEvent = false;\n            return html;\n        },\n\n        /* Generate the month and year header. */\n        _generateMonthYearHeader: function( inst, drawMonth, drawYear, minDate, maxDate,\n                                            secondary, monthNames, monthNamesShort ) {\n\n            var inMinYear, inMaxYear, month, years, thisYear, determineYear, year, endYear,\n                changeMonth = this._get( inst, \"changeMonth\" ),\n                changeYear = this._get( inst, \"changeYear\" ),\n                showMonthAfterYear = this._get( inst, \"showMonthAfterYear\" ),\n                selectMonthLabel = this._get( inst, \"selectMonthLabel\" ),\n                selectYearLabel = this._get( inst, \"selectYearLabel\" ),\n                html = \"<div class='ui-datepicker-title'>\",\n                monthHtml = \"\";\n\n            // Month selection\n            if ( secondary || !changeMonth ) {\n                monthHtml += \"<span class='ui-datepicker-month'>\" + monthNames[ drawMonth ] + \"</span>\";\n            } else {\n                inMinYear = ( minDate && minDate.getFullYear() === drawYear );\n                inMaxYear = ( maxDate && maxDate.getFullYear() === drawYear );\n                monthHtml += \"<select class='ui-datepicker-month' aria-label='\" + selectMonthLabel + \"' data-handler='selectMonth' data-event='change'>\";\n                for ( month = 0; month < 12; month++ ) {\n                    if ( ( !inMinYear || month >= minDate.getMonth() ) && ( !inMaxYear || month <= maxDate.getMonth() ) ) {\n                        monthHtml += \"<option value='\" + month + \"'\" +\n                            ( month === drawMonth ? \" selected='selected'\" : \"\" ) +\n                            \">\" + monthNamesShort[ month ] + \"</option>\";\n                    }\n                }\n                monthHtml += \"</select>\";\n            }\n\n            if ( !showMonthAfterYear ) {\n                html += monthHtml + ( secondary || !( changeMonth && changeYear ) ? \"&#xa0;\" : \"\" );\n            }\n\n            // Year selection\n            if ( !inst.yearshtml ) {\n                inst.yearshtml = \"\";\n                if ( secondary || !changeYear ) {\n                    html += \"<span class='ui-datepicker-year'>\" + drawYear + \"</span>\";\n                } else {\n\n                    // determine range of years to display\n                    years = this._get( inst, \"yearRange\" ).split( \":\" );\n                    thisYear = new Date().getFullYear();\n                    determineYear = function( value ) {\n                        var year = ( value.match( /c[+\\-].*/ ) ? drawYear + parseInt( value.substring( 1 ), 10 ) :\n                            ( value.match( /[+\\-].*/ ) ? thisYear + parseInt( value, 10 ) :\n                                parseInt( value, 10 ) ) );\n                        return ( isNaN( year ) ? thisYear : year );\n                    };\n                    year = determineYear( years[ 0 ] );\n                    endYear = Math.max( year, determineYear( years[ 1 ] || \"\" ) );\n                    year = ( minDate ? Math.max( year, minDate.getFullYear() ) : year );\n                    endYear = ( maxDate ? Math.min( endYear, maxDate.getFullYear() ) : endYear );\n                    inst.yearshtml += \"<select class='ui-datepicker-year' aria-label='\" + selectYearLabel + \"' data-handler='selectYear' data-event='change'>\";\n                    for ( ; year <= endYear; year++ ) {\n                        inst.yearshtml += \"<option value='\" + year + \"'\" +\n                            ( year === drawYear ? \" selected='selected'\" : \"\" ) +\n                            \">\" + year + \"</option>\";\n                    }\n                    inst.yearshtml += \"</select>\";\n\n                    html += inst.yearshtml;\n                    inst.yearshtml = null;\n                }\n            }\n\n            html += this._get( inst, \"yearSuffix\" );\n            if ( showMonthAfterYear ) {\n                html += ( secondary || !( changeMonth && changeYear ) ? \"&#xa0;\" : \"\" ) + monthHtml;\n            }\n            html += \"</div>\"; // Close datepicker_header\n            return html;\n        },\n\n        /* Adjust one of the date sub-fields. */\n        _adjustInstDate: function( inst, offset, period ) {\n            var year = inst.selectedYear + ( period === \"Y\" ? offset : 0 ),\n                month = inst.selectedMonth + ( period === \"M\" ? offset : 0 ),\n                day = Math.min( inst.selectedDay, this._getDaysInMonth( year, month ) ) + ( period === \"D\" ? offset : 0 ),\n                date = this._restrictMinMax( inst, this._daylightSavingAdjust( new Date( year, month, day ) ) );\n\n            inst.selectedDay = date.getDate();\n            inst.drawMonth = inst.selectedMonth = date.getMonth();\n            inst.drawYear = inst.selectedYear = date.getFullYear();\n            if ( period === \"M\" || period === \"Y\" ) {\n                this._notifyChange( inst );\n            }\n        },\n\n        /* Ensure a date is within any min/max bounds. */\n        _restrictMinMax: function( inst, date ) {\n            var minDate = this._getMinMaxDate( inst, \"min\" ),\n                maxDate = this._getMinMaxDate( inst, \"max\" ),\n                newDate = ( minDate && date < minDate ? minDate : date );\n            return ( maxDate && newDate > maxDate ? maxDate : newDate );\n        },\n\n        /* Notify change of month/year. */\n        _notifyChange: function( inst ) {\n            var onChange = this._get( inst, \"onChangeMonthYear\" );\n            if ( onChange ) {\n                onChange.apply( ( inst.input ? inst.input[ 0 ] : null ),\n                    [ inst.selectedYear, inst.selectedMonth + 1, inst ] );\n            }\n        },\n\n        /* Determine the number of months to show. */\n        _getNumberOfMonths: function( inst ) {\n            var numMonths = this._get( inst, \"numberOfMonths\" );\n            return ( numMonths == null ? [ 1, 1 ] : ( typeof numMonths === \"number\" ? [ 1, numMonths ] : numMonths ) );\n        },\n\n        /* Determine the current maximum date - ensure no time components are set. */\n        _getMinMaxDate: function( inst, minMax ) {\n            return this._determineDate( inst, this._get( inst, minMax + \"Date\" ), null );\n        },\n\n        /* Find the number of days in a given month. */\n        _getDaysInMonth: function( year, month ) {\n            return 32 - this._daylightSavingAdjust( new Date( year, month, 32 ) ).getDate();\n        },\n\n        /* Find the day of the week of the first of a month. */\n        _getFirstDayOfMonth: function( year, month ) {\n            return new Date( year, month, 1 ).getDay();\n        },\n\n        /* Determines if we should allow a \"next/prev\" month display change. */\n        _canAdjustMonth: function( inst, offset, curYear, curMonth ) {\n            var numMonths = this._getNumberOfMonths( inst ),\n                date = this._daylightSavingAdjust( new Date( curYear,\n                    curMonth + ( offset < 0 ? offset : numMonths[ 0 ] * numMonths[ 1 ] ), 1 ) );\n\n            if ( offset < 0 ) {\n                date.setDate( this._getDaysInMonth( date.getFullYear(), date.getMonth() ) );\n            }\n            return this._isInRange( inst, date );\n        },\n\n        /* Is the given date in the accepted range? */\n        _isInRange: function( inst, date ) {\n            var yearSplit, currentYear,\n                minDate = this._getMinMaxDate( inst, \"min\" ),\n                maxDate = this._getMinMaxDate( inst, \"max\" ),\n                minYear = null,\n                maxYear = null,\n                years = this._get( inst, \"yearRange\" );\n            if ( years ) {\n                yearSplit = years.split( \":\" );\n                currentYear = new Date().getFullYear();\n                minYear = parseInt( yearSplit[ 0 ], 10 );\n                maxYear = parseInt( yearSplit[ 1 ], 10 );\n                if ( yearSplit[ 0 ].match( /[+\\-].*/ ) ) {\n                    minYear += currentYear;\n                }\n                if ( yearSplit[ 1 ].match( /[+\\-].*/ ) ) {\n                    maxYear += currentYear;\n                }\n            }\n\n            return ( ( !minDate || date.getTime() >= minDate.getTime() ) &&\n                ( !maxDate || date.getTime() <= maxDate.getTime() ) &&\n                ( !minYear || date.getFullYear() >= minYear ) &&\n                ( !maxYear || date.getFullYear() <= maxYear ) );\n        },\n\n        /* Provide the configuration settings for formatting/parsing. */\n        _getFormatConfig: function( inst ) {\n            var shortYearCutoff = this._get( inst, \"shortYearCutoff\" );\n            shortYearCutoff = ( typeof shortYearCutoff !== \"string\" ? shortYearCutoff :\n                new Date().getFullYear() % 100 + parseInt( shortYearCutoff, 10 ) );\n            return { shortYearCutoff: shortYearCutoff,\n                dayNamesShort: this._get( inst, \"dayNamesShort\" ), dayNames: this._get( inst, \"dayNames\" ),\n                monthNamesShort: this._get( inst, \"monthNamesShort\" ), monthNames: this._get( inst, \"monthNames\" ) };\n        },\n\n        /* Format the given date for display. */\n        _formatDate: function( inst, day, month, year ) {\n            if ( !day ) {\n                inst.currentDay = inst.selectedDay;\n                inst.currentMonth = inst.selectedMonth;\n                inst.currentYear = inst.selectedYear;\n            }\n            var date = ( day ? ( typeof day === \"object\" ? day :\n                    this._daylightSavingAdjust( new Date( year, month, day ) ) ) :\n                this._daylightSavingAdjust( new Date( inst.currentYear, inst.currentMonth, inst.currentDay ) ) );\n            return this.formatDate( this._get( inst, \"dateFormat\" ), date, this._getFormatConfig( inst ) );\n        }\n    } );\n\n    /*\n     * Bind hover events for datepicker elements.\n     * Done via delegate so the binding only occurs once in the lifetime of the parent div.\n     * Global datepicker_instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.\n     */\n    function datepicker_bindHover( dpDiv ) {\n        var selector = \"button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a\";\n        return dpDiv.on( \"mouseout\", selector, function() {\n            $( this ).removeClass( \"ui-state-hover\" );\n            if ( this.className.indexOf( \"ui-datepicker-prev\" ) !== -1 ) {\n                $( this ).removeClass( \"ui-datepicker-prev-hover\" );\n            }\n            if ( this.className.indexOf( \"ui-datepicker-next\" ) !== -1 ) {\n                $( this ).removeClass( \"ui-datepicker-next-hover\" );\n            }\n        } )\n            .on( \"mouseover\", selector, datepicker_handleMouseover );\n    }\n\n    function datepicker_handleMouseover() {\n        if ( !$.datepicker._isDisabledDatepicker( datepicker_instActive.inline ? datepicker_instActive.dpDiv.parent()[ 0 ] : datepicker_instActive.input[ 0 ] ) ) {\n            $( this ).parents( \".ui-datepicker-calendar\" ).find( \"a\" ).removeClass( \"ui-state-hover\" );\n            $( this ).addClass( \"ui-state-hover\" );\n            if ( this.className.indexOf( \"ui-datepicker-prev\" ) !== -1 ) {\n                $( this ).addClass( \"ui-datepicker-prev-hover\" );\n            }\n            if ( this.className.indexOf( \"ui-datepicker-next\" ) !== -1 ) {\n                $( this ).addClass( \"ui-datepicker-next-hover\" );\n            }\n        }\n    }\n\n    /* jQuery extend now ignores nulls! */\n    function datepicker_extendRemove( target, props ) {\n        $.extend( target, props );\n        for ( var name in props ) {\n            if ( props[ name ] == null ) {\n                target[ name ] = props[ name ];\n            }\n        }\n        return target;\n    }\n\n    /* Invoke the datepicker functionality.\n       @param  options  string - a command, optionally followed by additional parameters or\n                        Object - settings for attaching new datepicker functionality\n       @return  jQuery object */\n    $.fn.datepicker = function( options ) {\n\n        /* Verify an empty collection wasn't passed - Fixes #6976 */\n        if ( !this.length ) {\n            return this;\n        }\n\n        /* Initialise the date picker. */\n        if ( !$.datepicker.initialized ) {\n            $( document ).on( \"mousedown\", $.datepicker._checkExternalClick );\n            $.datepicker.initialized = true;\n        }\n\n        /* Append datepicker main container to body if not exist. */\n        if ( $( \"#\" + $.datepicker._mainDivId ).length === 0 ) {\n            $( \"body\" ).append( $.datepicker.dpDiv );\n        }\n\n        var otherArgs = Array.prototype.slice.call( arguments, 1 );\n        if ( typeof options === \"string\" && ( options === \"isDisabled\" || options === \"getDate\" || options === \"widget\" ) ) {\n            return $.datepicker[ \"_\" + options + \"Datepicker\" ].\n            apply( $.datepicker, [ this[ 0 ] ].concat( otherArgs ) );\n        }\n        if ( options === \"option\" && arguments.length === 2 && typeof arguments[ 1 ] === \"string\" ) {\n            return $.datepicker[ \"_\" + options + \"Datepicker\" ].\n            apply( $.datepicker, [ this[ 0 ] ].concat( otherArgs ) );\n        }\n        return this.each( function() {\n            if ( typeof options === \"string\" ) {\n                $.datepicker[ \"_\" + options + \"Datepicker\" ]\n                    .apply( $.datepicker, [ this ].concat( otherArgs ) );\n            } else {\n                $.datepicker._attachDatepicker( this, options );\n            }\n        } );\n    };\n\n    $.datepicker = new Datepicker(); // singleton instance\n    $.datepicker.initialized = false;\n    $.datepicker.uuid = new Date().getTime();\n    $.datepicker.version = \"1.13.2\";\n\n    return $.datepicker;\n\n} );\n","jquery/ui-modules/widgets/progressbar.js":"/*!\n * jQuery UI Progressbar 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Progressbar\n//>>group: Widgets\n/* eslint-disable max-len */\n//>>description: Displays a status indicator for loading state, standard percentage, and other progress indicators.\n/* eslint-enable max-len */\n//>>docs: http://api.jqueryui.com/progressbar/\n//>>demos: http://jqueryui.com/progressbar/\n//>>css.structure: ../../themes/base/core.css\n//>>css.structure: ../../themes/base/progressbar.css\n//>>css.theme: ../../themes/base/theme.css\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n            \"../version\",\n            \"../widget\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    return $.widget( \"ui.progressbar\", {\n        version: \"1.13.2\",\n        options: {\n            classes: {\n                \"ui-progressbar\": \"ui-corner-all\",\n                \"ui-progressbar-value\": \"ui-corner-left\",\n                \"ui-progressbar-complete\": \"ui-corner-right\"\n            },\n            max: 100,\n            value: 0,\n\n            change: null,\n            complete: null\n        },\n\n        min: 0,\n\n        _create: function() {\n\n            // Constrain initial value\n            this.oldValue = this.options.value = this._constrainedValue();\n\n            this.element.attr( {\n\n                // Only set static values; aria-valuenow and aria-valuemax are\n                // set inside _refreshValue()\n                role: \"progressbar\",\n                \"aria-valuemin\": this.min\n            } );\n            this._addClass( \"ui-progressbar\", \"ui-widget ui-widget-content\" );\n\n            this.valueDiv = $( \"<div>\" ).appendTo( this.element );\n            this._addClass( this.valueDiv, \"ui-progressbar-value\", \"ui-widget-header\" );\n            this._refreshValue();\n        },\n\n        _destroy: function() {\n            this.element.removeAttr( \"role aria-valuemin aria-valuemax aria-valuenow\" );\n\n            this.valueDiv.remove();\n        },\n\n        value: function( newValue ) {\n            if ( newValue === undefined ) {\n                return this.options.value;\n            }\n\n            this.options.value = this._constrainedValue( newValue );\n            this._refreshValue();\n        },\n\n        _constrainedValue: function( newValue ) {\n            if ( newValue === undefined ) {\n                newValue = this.options.value;\n            }\n\n            this.indeterminate = newValue === false;\n\n            // Sanitize value\n            if ( typeof newValue !== \"number\" ) {\n                newValue = 0;\n            }\n\n            return this.indeterminate ? false :\n                Math.min( this.options.max, Math.max( this.min, newValue ) );\n        },\n\n        _setOptions: function( options ) {\n\n            // Ensure \"value\" option is set after other values (like max)\n            var value = options.value;\n            delete options.value;\n\n            this._super( options );\n\n            this.options.value = this._constrainedValue( value );\n            this._refreshValue();\n        },\n\n        _setOption: function( key, value ) {\n            if ( key === \"max\" ) {\n\n                // Don't allow a max less than min\n                value = Math.max( this.min, value );\n            }\n            this._super( key, value );\n        },\n\n        _setOptionDisabled: function( value ) {\n            this._super( value );\n\n            this.element.attr( \"aria-disabled\", value );\n            this._toggleClass( null, \"ui-state-disabled\", !!value );\n        },\n\n        _percentage: function() {\n            return this.indeterminate ?\n                100 :\n                100 * ( this.options.value - this.min ) / ( this.options.max - this.min );\n        },\n\n        _refreshValue: function() {\n            var value = this.options.value,\n                percentage = this._percentage();\n\n            this.valueDiv\n                .toggle( this.indeterminate || value > this.min )\n                .width( percentage.toFixed( 0 ) + \"%\" );\n\n            this\n                ._toggleClass( this.valueDiv, \"ui-progressbar-complete\", null,\n                    value === this.options.max )\n                ._toggleClass( \"ui-progressbar-indeterminate\", null, this.indeterminate );\n\n            if ( this.indeterminate ) {\n                this.element.removeAttr( \"aria-valuenow\" );\n                if ( !this.overlayDiv ) {\n                    this.overlayDiv = $( \"<div>\" ).appendTo( this.valueDiv );\n                    this._addClass( this.overlayDiv, \"ui-progressbar-overlay\" );\n                }\n            } else {\n                this.element.attr( {\n                    \"aria-valuemax\": this.options.max,\n                    \"aria-valuenow\": value\n                } );\n                if ( this.overlayDiv ) {\n                    this.overlayDiv.remove();\n                    this.overlayDiv = null;\n                }\n            }\n\n            if ( this.oldValue !== value ) {\n                this.oldValue = value;\n                this._trigger( \"change\" );\n            }\n            if ( value === this.options.max ) {\n                this._trigger( \"complete\" );\n            }\n        }\n    } );\n\n} );\n","jquery/ui-modules/widgets/tooltip.js":"/*!\n * jQuery UI Tooltip 1.13.2\n * http://jqueryui.com\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n */\n\n//>>label: Tooltip\n//>>group: Widgets\n//>>description: Shows additional information for any element on hover or focus.\n//>>docs: http://api.jqueryui.com/tooltip/\n//>>demos: http://jqueryui.com/tooltip/\n//>>css.structure: ../../themes/base/core.css\n//>>css.structure: ../../themes/base/tooltip.css\n//>>css.theme: ../../themes/base/theme.css\n\n( function( factory ) {\n    \"use strict\";\n\n    if ( typeof define === \"function\" && define.amd ) {\n\n        // AMD. Register as an anonymous module.\n        define( [\n            \"jquery\",\n            \"../keycode\",\n            \"../position\",\n            \"../unique-id\",\n            \"../version\",\n            \"../widget\"\n        ], factory );\n    } else {\n\n        // Browser globals\n        factory( jQuery );\n    }\n} )( function( $ ) {\n    \"use strict\";\n\n    $.widget( \"ui.tooltip\", {\n        version: \"1.13.2\",\n        options: {\n            classes: {\n                \"ui-tooltip\": \"ui-corner-all ui-widget-shadow\"\n            },\n            content: function() {\n                var title = $( this ).attr( \"title\" );\n\n                // Escape title, since we're going from an attribute to raw HTML\n                return $( \"<a>\" ).text( title ).html();\n            },\n            hide: true,\n\n            // Disabled elements have inconsistent behavior across browsers (#8661)\n            items: \"[title]:not([disabled])\",\n            position: {\n                my: \"left top+15\",\n                at: \"left bottom\",\n                collision: \"flipfit flip\"\n            },\n            show: true,\n            track: false,\n\n            // Callbacks\n            close: null,\n            open: null\n        },\n\n        _addDescribedBy: function( elem, id ) {\n            var describedby = ( elem.attr( \"aria-describedby\" ) || \"\" ).split( /\\s+/ );\n            describedby.push( id );\n            elem\n                .data( \"ui-tooltip-id\", id )\n                .attr( \"aria-describedby\", String.prototype.trim.call( describedby.join( \" \" ) ) );\n        },\n\n        _removeDescribedBy: function( elem ) {\n            var id = elem.data( \"ui-tooltip-id\" ),\n                describedby = ( elem.attr( \"aria-describedby\" ) || \"\" ).split( /\\s+/ ),\n                index = $.inArray( id, describedby );\n\n            if ( index !== -1 ) {\n                describedby.splice( index, 1 );\n            }\n\n            elem.removeData( \"ui-tooltip-id\" );\n            describedby = String.prototype.trim.call( describedby.join( \" \" ) );\n            if ( describedby ) {\n                elem.attr( \"aria-describedby\", describedby );\n            } else {\n                elem.removeAttr( \"aria-describedby\" );\n            }\n        },\n\n        _create: function() {\n            this._on( {\n                mouseover: \"open\",\n                focusin: \"open\"\n            } );\n\n            // IDs of generated tooltips, needed for destroy\n            this.tooltips = {};\n\n            // IDs of parent tooltips where we removed the title attribute\n            this.parents = {};\n\n            // Append the aria-live region so tooltips announce correctly\n            this.liveRegion = $( \"<div>\" )\n                .attr( {\n                    role: \"log\",\n                    \"aria-live\": \"assertive\",\n                    \"aria-relevant\": \"additions\"\n                } )\n                .appendTo( this.document[ 0 ].body );\n            this._addClass( this.liveRegion, null, \"ui-helper-hidden-accessible\" );\n\n            this.disabledTitles = $( [] );\n        },\n\n        _setOption: function( key, value ) {\n            var that = this;\n\n            this._super( key, value );\n\n            if ( key === \"content\" ) {\n                $.each( this.tooltips, function( id, tooltipData ) {\n                    that._updateContent( tooltipData.element );\n                } );\n            }\n        },\n\n        _setOptionDisabled: function( value ) {\n            this[ value ? \"_disable\" : \"_enable\" ]();\n        },\n\n        _disable: function() {\n            var that = this;\n\n            // Close open tooltips\n            $.each( this.tooltips, function( id, tooltipData ) {\n                var event = $.Event( \"blur\" );\n                event.target = event.currentTarget = tooltipData.element[ 0 ];\n                that.close( event, true );\n            } );\n\n            // Remove title attributes to prevent native tooltips\n            this.disabledTitles = this.disabledTitles.add(\n                this.element.find( this.options.items ).addBack()\n                    .filter( function() {\n                        var element = $( this );\n                        if ( element.is( \"[title]\" ) ) {\n                            return element\n                                .data( \"ui-tooltip-title\", element.attr( \"title\" ) )\n                                .removeAttr( \"title\" );\n                        }\n                    } )\n            );\n        },\n\n        _enable: function() {\n\n            // restore title attributes\n            this.disabledTitles.each( function() {\n                var element = $( this );\n                if ( element.data( \"ui-tooltip-title\" ) ) {\n                    element.attr( \"title\", element.data( \"ui-tooltip-title\" ) );\n                }\n            } );\n            this.disabledTitles = $( [] );\n        },\n\n        open: function( event ) {\n            var that = this,\n                target = $( event ? event.target : this.element )\n\n                    // we need closest here due to mouseover bubbling,\n                    // but always pointing at the same event target\n                    .closest( this.options.items );\n\n            // No element to show a tooltip for or the tooltip is already open\n            if ( !target.length || target.data( \"ui-tooltip-id\" ) ) {\n                return;\n            }\n\n            if ( target.attr( \"title\" ) ) {\n                target.data( \"ui-tooltip-title\", target.attr( \"title\" ) );\n            }\n\n            target.data( \"ui-tooltip-open\", true );\n\n            // Kill parent tooltips, custom or native, for hover\n            if ( event && event.type === \"mouseover\" ) {\n                target.parents().each( function() {\n                    var parent = $( this ),\n                        blurEvent;\n                    if ( parent.data( \"ui-tooltip-open\" ) ) {\n                        blurEvent = $.Event( \"blur\" );\n                        blurEvent.target = blurEvent.currentTarget = this;\n                        that.close( blurEvent, true );\n                    }\n                    if ( parent.attr( \"title\" ) ) {\n                        parent.uniqueId();\n                        that.parents[ this.id ] = {\n                            element: this,\n                            title: parent.attr( \"title\" )\n                        };\n                        parent.attr( \"title\", \"\" );\n                    }\n                } );\n            }\n\n            this._registerCloseHandlers( event, target );\n            this._updateContent( target, event );\n        },\n\n        _updateContent: function( target, event ) {\n            var content,\n                contentOption = this.options.content,\n                that = this,\n                eventType = event ? event.type : null;\n\n            if ( typeof contentOption === \"string\" || contentOption.nodeType ||\n                contentOption.jquery ) {\n                return this._open( event, target, contentOption );\n            }\n\n            content = contentOption.call( target[ 0 ], function( response ) {\n\n                // IE may instantly serve a cached response for ajax requests\n                // delay this call to _open so the other call to _open runs first\n                that._delay( function() {\n\n                    // Ignore async response if tooltip was closed already\n                    if ( !target.data( \"ui-tooltip-open\" ) ) {\n                        return;\n                    }\n\n                    // JQuery creates a special event for focusin when it doesn't\n                    // exist natively. To improve performance, the native event\n                    // object is reused and the type is changed. Therefore, we can't\n                    // rely on the type being correct after the event finished\n                    // bubbling, so we set it back to the previous value. (#8740)\n                    if ( event ) {\n                        event.type = eventType;\n                    }\n                    this._open( event, target, response );\n                } );\n            } );\n            if ( content ) {\n                this._open( event, target, content );\n            }\n        },\n\n        _open: function( event, target, content ) {\n            var tooltipData, tooltip, delayedShow, a11yContent,\n                positionOption = $.extend( {}, this.options.position );\n\n            if ( !content ) {\n                return;\n            }\n\n            // Content can be updated multiple times. If the tooltip already\n            // exists, then just update the content and bail.\n            tooltipData = this._find( target );\n            if ( tooltipData ) {\n                tooltipData.tooltip.find( \".ui-tooltip-content\" ).html( content );\n                return;\n            }\n\n            // If we have a title, clear it to prevent the native tooltip\n            // we have to check first to avoid defining a title if none exists\n            // (we don't want to cause an element to start matching [title])\n            //\n            // We use removeAttr only for key events, to allow IE to export the correct\n            // accessible attributes. For mouse events, set to empty string to avoid\n            // native tooltip showing up (happens only when removing inside mouseover).\n            if ( target.is( \"[title]\" ) ) {\n                if ( event && event.type === \"mouseover\" ) {\n                    target.attr( \"title\", \"\" );\n                } else {\n                    target.removeAttr( \"title\" );\n                }\n            }\n\n            tooltipData = this._tooltip( target );\n            tooltip = tooltipData.tooltip;\n            this._addDescribedBy( target, tooltip.attr( \"id\" ) );\n            tooltip.find( \".ui-tooltip-content\" ).html( content );\n\n            // Support: Voiceover on OS X, JAWS on IE <= 9\n            // JAWS announces deletions even when aria-relevant=\"additions\"\n            // Voiceover will sometimes re-read the entire log region's contents from the beginning\n            this.liveRegion.children().hide();\n            a11yContent = $( \"<div>\" ).html( tooltip.find( \".ui-tooltip-content\" ).html() );\n            a11yContent.removeAttr( \"name\" ).find( \"[name]\" ).removeAttr( \"name\" );\n            a11yContent.removeAttr( \"id\" ).find( \"[id]\" ).removeAttr( \"id\" );\n            a11yContent.appendTo( this.liveRegion );\n\n            function position( event ) {\n                positionOption.of = event;\n                if ( tooltip.is( \":hidden\" ) ) {\n                    return;\n                }\n                tooltip.position( positionOption );\n            }\n            if ( this.options.track && event && /^mouse/.test( event.type ) ) {\n                this._on( this.document, {\n                    mousemove: position\n                } );\n\n                // trigger once to override element-relative positioning\n                position( event );\n            } else {\n                tooltip.position( $.extend( {\n                    of: target\n                }, this.options.position ) );\n            }\n\n            tooltip.hide();\n\n            this._show( tooltip, this.options.show );\n\n            // Handle tracking tooltips that are shown with a delay (#8644). As soon\n            // as the tooltip is visible, position the tooltip using the most recent\n            // event.\n            // Adds the check to add the timers only when both delay and track options are set (#14682)\n            if ( this.options.track && this.options.show && this.options.show.delay ) {\n                delayedShow = this.delayedShow = setInterval( function() {\n                    if ( tooltip.is( \":visible\" ) ) {\n                        position( positionOption.of );\n                        clearInterval( delayedShow );\n                    }\n                }, 13 );\n            }\n\n            this._trigger( \"open\", event, { tooltip: tooltip } );\n        },\n\n        _registerCloseHandlers: function( event, target ) {\n            var events = {\n                keyup: function( event ) {\n                    if ( event.keyCode === $.ui.keyCode.ESCAPE ) {\n                        var fakeEvent = $.Event( event );\n                        fakeEvent.currentTarget = target[ 0 ];\n                        this.close( fakeEvent, true );\n                    }\n                }\n            };\n\n            // Only bind remove handler for delegated targets. Non-delegated\n            // tooltips will handle this in destroy.\n            if ( target[ 0 ] !== this.element[ 0 ] ) {\n                events.remove = function() {\n                    var targetElement = this._find( target );\n                    if ( targetElement ) {\n                        this._removeTooltip( targetElement.tooltip );\n                    }\n                };\n            }\n\n            if ( !event || event.type === \"mouseover\" ) {\n                events.mouseleave = \"close\";\n            }\n            if ( !event || event.type === \"focusin\" ) {\n                events.focusout = \"close\";\n            }\n            this._on( true, target, events );\n        },\n\n        close: function( event ) {\n            var tooltip,\n                that = this,\n                target = $( event ? event.currentTarget : this.element ),\n                tooltipData = this._find( target );\n\n            // The tooltip may already be closed\n            if ( !tooltipData ) {\n\n                // We set ui-tooltip-open immediately upon open (in open()), but only set the\n                // additional data once there's actually content to show (in _open()). So even if the\n                // tooltip doesn't have full data, we always remove ui-tooltip-open in case we're in\n                // the period between open() and _open().\n                target.removeData( \"ui-tooltip-open\" );\n                return;\n            }\n\n            tooltip = tooltipData.tooltip;\n\n            // Disabling closes the tooltip, so we need to track when we're closing\n            // to avoid an infinite loop in case the tooltip becomes disabled on close\n            if ( tooltipData.closing ) {\n                return;\n            }\n\n            // Clear the interval for delayed tracking tooltips\n            clearInterval( this.delayedShow );\n\n            // Only set title if we had one before (see comment in _open())\n            // If the title attribute has changed since open(), don't restore\n            if ( target.data( \"ui-tooltip-title\" ) && !target.attr( \"title\" ) ) {\n                target.attr( \"title\", target.data( \"ui-tooltip-title\" ) );\n            }\n\n            this._removeDescribedBy( target );\n\n            tooltipData.hiding = true;\n            tooltip.stop( true );\n            this._hide( tooltip, this.options.hide, function() {\n                that._removeTooltip( $( this ) );\n            } );\n\n            target.removeData( \"ui-tooltip-open\" );\n            this._off( target, \"mouseleave focusout keyup\" );\n\n            // Remove 'remove' binding only on delegated targets\n            if ( target[ 0 ] !== this.element[ 0 ] ) {\n                this._off( target, \"remove\" );\n            }\n            this._off( this.document, \"mousemove\" );\n\n            if ( event && event.type === \"mouseleave\" ) {\n                $.each( this.parents, function( id, parent ) {\n                    $( parent.element ).attr( \"title\", parent.title );\n                    delete that.parents[ id ];\n                } );\n            }\n\n            tooltipData.closing = true;\n            this._trigger( \"close\", event, { tooltip: tooltip } );\n            if ( !tooltipData.hiding ) {\n                tooltipData.closing = false;\n            }\n        },\n\n        _tooltip: function( element ) {\n            var tooltip = $( \"<div>\" ).attr( \"role\", \"tooltip\" ),\n                content = $( \"<div>\" ).appendTo( tooltip ),\n                id = tooltip.uniqueId().attr( \"id\" );\n\n            this._addClass( content, \"ui-tooltip-content\" );\n            this._addClass( tooltip, \"ui-tooltip\", \"ui-widget ui-widget-content\" );\n\n            tooltip.appendTo( this._appendTo( element ) );\n\n            return this.tooltips[ id ] = {\n                element: element,\n                tooltip: tooltip\n            };\n        },\n\n        _find: function( target ) {\n            var id = target.data( \"ui-tooltip-id\" );\n            return id ? this.tooltips[ id ] : null;\n        },\n\n        _removeTooltip: function( tooltip ) {\n\n            // Clear the interval for delayed tracking tooltips\n            clearInterval( this.delayedShow );\n\n            tooltip.remove();\n            delete this.tooltips[ tooltip.attr( \"id\" ) ];\n        },\n\n        _appendTo: function( target ) {\n            var element = target.closest( \".ui-front, dialog\" );\n\n            if ( !element.length ) {\n                element = this.document[ 0 ].body;\n            }\n\n            return element;\n        },\n\n        _destroy: function() {\n            var that = this;\n\n            // Close open tooltips\n            $.each( this.tooltips, function( id, tooltipData ) {\n\n                // Delegate to close method to handle common cleanup\n                var event = $.Event( \"blur\" ),\n                    element = tooltipData.element;\n                event.target = event.currentTarget = element[ 0 ];\n                that.close( event, true );\n\n                // Remove immediately; destroying an open tooltip doesn't use the\n                // hide animation\n                $( \"#\" + id ).remove();\n\n                // Restore the title\n                if ( element.data( \"ui-tooltip-title\" ) ) {\n\n                    // If the title attribute has changed since open(), don't restore\n                    if ( !element.attr( \"title\" ) ) {\n                        element.attr( \"title\", element.data( \"ui-tooltip-title\" ) );\n                    }\n                    element.removeData( \"ui-tooltip-title\" );\n                }\n            } );\n            this.liveRegion.remove();\n        }\n    } );\n\n// DEPRECATED\n// TODO: Switch return back to widget declaration at top of file when this is removed\n    if ( $.uiBackCompat !== false ) {\n\n        // Backcompat for tooltipClass option\n        $.widget( \"ui.tooltip\", $.ui.tooltip, {\n            options: {\n                tooltipClass: null\n            },\n            _tooltip: function() {\n                var tooltipData = this._superApply( arguments );\n                if ( this.options.tooltipClass ) {\n                    tooltipData.tooltip.addClass( this.options.tooltipClass );\n                }\n                return tooltipData;\n            }\n        } );\n    }\n\n    return $.ui.tooltip;\n\n} );\n"}
}});
